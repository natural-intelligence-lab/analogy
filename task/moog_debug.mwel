///////////////////////////////////////////////////////////////////////////////
//
// Choose interface to use
//
///////////////////////////////////////////////////////////////////////////////

// Include one of the following hand interfaces:

%include 'hand_interfaces/keyboard'
// %include 'hand_interfaces/gamepad'
// %include 'hand_interfaces/joystick'
// %include 'hand_interfaces/joystick_monkey'


// Include one of the following eye interfaces

%include 'eye_interfaces/mouse'
// %include 'eye_interfaces/eyelink'

// Nidaq interface and reward variable
// %include 'nidaq'
// %include 'firmata_ephys'
// %include 'firmata_train'

///////////////////////////////////////////////////////////////////////////////
//
// Choose platform
//
///////////////////////////////////////////////////////////////////////////////
//var platform = 'monkey_ephys'
// var platform = 'monkey_train'
// var platform = 'psychophysics'
var platform = 'laptop'
// var platform = 'desktop'

///////////////////////////////////////////////////////////////////////////////
//
// Set data file, pwd, and python_site_packages
//
///////////////////////////////////////////////////////////////////////////////


var pwd = ""
var python_site_packages = ""
python_file ('set_pwd.py')

data_file ("$pwd/logs/$(date('%Y_%m_%d'))/mworks/$(date('%Y_%m_%d_%H_%M_%S'))")


///////////////////////////////////////////////////////////////////////////////
//
// Resources
//
///////////////////////////////////////////////////////////////////////////////

// These directories are copied to the machine running MWServer
resource ('sounds')

// These files are copied to the machine running MWServer and executed when the
// experiment loads
python_file ('calibration_static.py')
python_file ('task.py')


///////////////////////////////////////////////////////////////////////////////
//
// Stimuli
//
///////////////////////////////////////////////////////////////////////////////


var image_pixel_width = 512
var image_pixel_height = 512
var image_size_x = 20
var image_size_y = 20
var image_pos_x = 0
var image_pos_y = 0

stimulus/python_image image (
    pixel_buffer_format = 'RGB8'
    pixel_buffer_width = image_pixel_width
    pixel_buffer_height = image_pixel_height
    pixel_buffer_expr = 't.step()'
    x_size = image_size_x
    y_size = image_size_y
    x_position = image_pos_x
    y_position = image_pos_y
    )


///////////////////////////////////////////////////////////////////////////////
//
// Sounds
//
///////////////////////////////////////////////////////////////////////////////


wav_file success_sound ('sounds/success.wav')
wav_file failure_sound ('sounds/failure.wav')


///////////////////////////////////////////////////////////////////////////////
//
// Variables
//
///////////////////////////////////////////////////////////////////////////////


var data_file = ""

var end_task = False
var end_trial = False
var task_error = False

var reward_duration = 0
var reward_line = false
var inter_trial_interval_duration = 0s
var default_iti = 0s

// For mapping eye tracker coordinates to positions on the image frame
var eye_to_frame_coeffs = [[0, 0], [0, 0]]
var eye_to_frame_intercept = [0, 0]

var reward_gain = 60000
var max_rewarding_dist=0.1

var num_trials = 0
var num_completeTrials = 0

var id_left_prey = 0
var num_trials_left = 0
var num_completeTrials_left = 0
var num_trials_right = 0
var num_completeTrials_right = 0

// offline behavior
var end_x_prey = 0
var end_x_agent = 0
var end_x_distract = 0
var start_x_prey = 0

//time stamps for eye movement analysis
var tFix = 0
var tOffline = 0
var tOfflineRT = 0
var tVisMotion = 0
var tInvMotion = 0
var tRew = 0

var RT_offline = 0
var tp = 0
var ts = 0

var prey_opacity=255
var path_prey_opacity=255

var prey_distance_invisible = 0
var slope_opacity = 0

var num_turns = 0

var num_trial_junction =[]
var num_trial_amb_junction =[]
var num_correct_junction=[]
var num_correct_amb_junction=[]
var p_visible_aid = 0

var sync = 0

///////////////////////////////////////////////////////////////////////////////
//
// Shared Task Protocol Body
//
///////////////////////////////////////////////////////////////////////////////


%define run_task ()
    report ('********    STARTING TASK    ********')
    end_task = false
    task_error = false

    trial {
        task {
            state 'Begin trial' {
                report('****  BEGINNING TRIAL  $(num_trials) ****')
                // for matlab
                sync=0
                sync=1

                run_python_string ('t.reset()')

                reward_duration = 0
                
                // It's not strictly necessary to start and stop the I/O devices
                // every trial (i.e. you could just start them once at the
                // beginning of the protocol), but doing so ensures that the
                // Python code receives joystick and eye tracking events only
                // while a trial is active
                start_io_device (eye_tracker)
                start_io_device (hand)

                // start_io_device (firmata)
                // start_io_device (nidaq)

                queue_stimulus (image)
                update_display ()

                goto ('Wait for completion')
            }

            state 'Wait for completion' {
                goto (
                    target = 'Success'
                    when = reward_duration > 0
                    )
                goto (
                    target = 'Failure'
                    when = reward_duration < 0
                    )
                goto (
                    target = 'End trial'
                    when = end_trial
                    )
                goto (
                    target = 'End protocol'
                    when = end_task
                    )
                goto (
                    target = 'Task error'
                    when = task_error
                    )
            }

            state 'Success' {
                play_sound (success_sound)
                
                num_completeTrials = num_completeTrials + 1
                if (id_left_prey) {
                    num_completeTrials_left = num_completeTrials_left + 1
                }
                if (!id_left_prey) {
                    num_completeTrials_right = num_completeTrials_right + 1
                }

                report ('Dispensing reward for $(reward_duration*reward_gain) ms')
                
                goto ('Reward')
            }

            state 'Reward' {
                // report ('Dispensing reward for $(reward_duration / 1000) ms')

                // In a real experiment, reward_line could control a digital
                // output on a NIDAQ or other device
                reward_line = true
                wait(reward_duration*reward_gain)
                reward_line = false
                reward_duration = 0

                goto ('Wait for completion')
            }

            state 'Failure' {
                play_sound (failure_sound)
                reward_duration = 0
                
                goto ('Wait for completion')
            }

            state 'End trial' {
                report('****  ENDING TRIAL $(num_completeTrials) ****')
                
                stop_io_device (eye_tracker)
                stop_io_device (hand)
                // stop_io_device (firmata)
                // stop_io_device (nidaq)
                
                num_trials = num_trials + 1
                if (id_left_prey) {
                    num_trials_left = num_trials_left + 1
                }
                if (!id_left_prey) {
                    num_trials_right = num_trials_right + 1
                }

                end_trial = false
                clear_display ()

                start_timer (
                    timer = timer
                    duration = inter_trial_interval_duration
                    )

                goto (
                    target = 'Begin trial'
                    when = timer_expired(timer)
                    )
            }

            state 'End protocol' {
                report ('********    ENDING TASK    ********')
                inter_trial_interval_duration = default_iti
                yield ()
            }

            state 'Task error' {
                report ('********    TASK ERROR    ********')
                goto ('End protocol')
            }
        }
    }
%end


///////////////////////////////////////////////////////////////////////////////
//
// Eye Calibration Setup Protocol
//
///////////////////////////////////////////////////////////////////////////////


//protocol 'Eye Calibration' {
//    // inter_trial_interval_duration = 0s
//    run_python_string ('t = CalibrationManager(grid_size=3)')
//    run_task ()
//}


///////////////////////////////////////////////////////////////////////////////
//
// Task Protocols
//
///////////////////////////////////////////////////////////////////////////////

protocol 'move joystick up' {
    run_python_string (
        't = TaskManager(level="training.vertical_timing.vertical_timing_center", fixation_phase=False, static_prey=True, static_agent=True, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'static timing' {
    run_python_string (
        't = TaskManager(level="training.vertical_timing_online.vertical_timing_center", fixation_phase=False, static_agent=True, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'timing, moving agent' {
    run_python_string (
        't = TaskManager(level="training.vertical_timing.vertical_timing_center", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'timing, displaced' {
    run_python_string (
        't = TaskManager(level="training.vertical_timing.vertical_timing_random_x", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'path_no_distract' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_no_distract", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'path_no_distract_uniform_num_turns' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_no_distract_uniform_num_turns", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'path_no_distract_uniform_num_turns_staircase' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_no_distract_uniform_num_turns_staircase", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)') // for G // 3000)') // 4000
    run_task ()
}

protocol 'path_no_distract_even_odd_num_turns_staircase' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_no_distract_even_odd_num_turns_staircase", fixation_phase=False, prey_opacity=0, ms_per_unit=3000)') // 4000
    run_task ()
}

protocol 'path_partial_distract_even_odd_num_turns_staircase' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_partial_distract_even_odd_num_turns_staircase", fixation_phase=False, prey_opacity=0, ms_per_unit=3000)') // 4000
    run_task ()
}

protocol 'path_distract_path_even_odd_num_turns_staircase' {
    run_python_string (
        't = TaskManager(level="training.path_no_distract.path_distract_path_even_odd_num_turns_staircase", fixation_phase=False, prey_opacity=0, ms_per_unit=3000)') // 4000
    run_task ()
}

protocol 'timing, displaced_g' {
    run_python_string (
        't = TaskManager(level="training.vertical_timing_g.vertical_timing_random_x", fixation_phase=False, prey_opacity=255, ms_per_unit=4000)')
    run_task ()
}

protocol 'random_12_staircase' {
    run_python_string (
        't = TaskManager(level="random.random_12.random_12_staircase", fixation_phase=False, prey_opacity=0, ms_per_unit=2000)') //_uniform_num_turns
    run_task ()
}

protocol 'random_12_staircase_both_prey' {
    run_python_string (
        't = TaskManager(level="random.random_12.random_12_staircase_both", fixation_phase=False, prey_opacity=0, ms_per_unit=2000)') //_uniform_num_turns
    run_task ()
}

protocol 'random_12' {
    run_python_string (
        't = TaskManager(level="random.random_12.random_12", fixation_phase=False, ms_per_unit=2000)') //_uniform_num_turns
    run_task ()
}

protocol 'random_12_uniform_num_turns' {
    run_python_string (
        't = TaskManager(level="random.random_12.random_12_uniform_num_turns", fixation_phase=False, ms_per_unit=2000)')
    run_task ()
}

protocol 'Vertical prey, random height' {
    run_python_string (
        't = TaskManager(level="random.vertical_random_height.vertical_random_height", fixation_phase=False, ms_per_unit=2000)')
    run_task ()
}

protocol 'random_14_layered' {
    run_python_string (
        't = TaskManager(level="random.layered.random_14_staircase", fixation_phase=False, ms_per_unit=1000)') //_uniform_num_turns ms_per_unit=2000
    run_task ()
}

protocol 'random_16_wire' {
    run_python_string (
        't = TaskManager(level="random.wire_maze.random_16_staircase", fixation_phase=False, ms_per_unit=2000)') //_uniform_num_turns ms_per_unit=2000
    run_task ()
}


protocol 'random_6_wire' {
    run_python_string (
        't = TaskManager(level="random.wire_maze.random_6_staircase", fixation_phase=False, ms_per_unit=1500)') //_uniform_num_turns ms_per_unit=2000
    run_task ()
}