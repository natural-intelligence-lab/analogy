group 'object'{
    stimulus/text object ( // alternative: ellipse rectangle
            text=')'
            font_name="Capitals"
            font_size=64

            color = object_red,object_green,object_blue
            text_alignment = center
            x_size = object_sz
            y_size = object_sz
            rotation = -45
            x_position = objectX
            y_position = objectY-object_offsetY
            alpha_multiplier = object_alpha
    )
}

stimulus_group 'cue'{
    stimulus/ellipse cue1 ( // below
            color = cue_red,cue_green,cue_blue
            x_size = circle_size
            y_size = circle_size
            x_position = cueX
            y_position = cueY-within_distance
            rotation = 0
            alpha_multiplier = cue_alpha
    )
    stimulus/ellipse cue2 ( // up left
            color = cue_red,cue_green,cue_blue
            x_size = circle_size
            y_size = circle_size
            x_position = cueX - within_distance*cos(30/180*pi())
            y_position = cueY + within_distance*sin(30/180*pi())
            rotation = 0
            alpha_multiplier = cue_alpha
    )

    stimulus/ellipse cue3 ( // up right
            color = cue_red,cue_green,cue_blue
            x_size = circle_size
            y_size = circle_size
            x_position = cueX + within_distance*cos(30/180*pi())
            y_position = cueY + within_distance*sin(30/180*pi())
            rotation = 0
            alpha_multiplier = cue_alpha
    )

}


// alterantive: range_replicator or list_replicator

var local_index = 0 (scope = local)
stimulus_group occluders {
    range_replicator (
        variable = local_index
        from = 0
        to = (nOccluder-1)
        step = 1
        ) {

        stimulus/rectangle occluder${local_index}(
            color = occluder_red,occluder_green,occluder_blue
            x_size = occluder_size
            y_size = occluder_size
            x_position = occluderX[${local_index}]
            y_position = occluderY[${local_index}]
            rotation = 0
            alpha_multiplier = occluder_alpha
            )
    }
}


stimulus_group occluder_targets {
    range_replicator (
        variable = local_index
        from = 0
        to = (nOccluder-1-1)
        step = 1
        ) {

        stimulus/circular_fixation_point occluder_target${local_index} (
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_occluder_target${local_index} // on_occluder_target[${local_index}]
            x_size = target_sz
            y_size = target_sz
            x_position = occluder_targetX[${local_index}]
            y_position = occluder_targetY[${local_index}]
            rotation = 0
            alpha_multiplier = target_alpha
        )
    }
}

group 'Fixation' {
    stimulus/circular_fixation_point fixCircleStatic (
            color = fix_red_static,fix_green_static,fix_blue_static
            trigger_width = fix_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_fix_static
            x_size = fix_sz
            y_size = fix_sz
            x_position = fixX
            y_position = fixY-fixY_offset
            rotation = 0
            alpha_multiplier = 1
    )
}

group 'cue_window'{
    stimulus/circular_fixation_point cue_window (
            color = 1,1,1
            trigger_width = cue_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_cue
            x_size = 0.00001
            y_size = 0.00001
            x_position = cueX
            y_position = cueY
            rotation = 0
            alpha_multiplier = 0
    )
}

group 'Target_window'{
    stimulus/circular_fixation_point target_window (
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_target
            x_size = target_sz
            y_size = target_sz
            x_position = targetX
            y_position = targetY
            rotation = 0
            alpha_multiplier = target_alpha
    )
}


group 'Photodiode'{
        stimulus/ellipse photodiode(
        color = photodiode_red,photodiode_green,photodiode_blue
        x_size = photodiode_size
        y_size = photodiode_size
        x_position = photodiodeX
        y_position = photodiodeY
        rotation = 0
        alpha_multiplier = 1
    )
}


iodevice/stimulus_display( // % distance 66, width 53, height 30 cm -> atand(height/2/distance)*2; % 25.6 deg
    background_color = 0,0,0
    )