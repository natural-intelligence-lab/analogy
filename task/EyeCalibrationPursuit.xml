<?xml version="1.0"?>
<monkeyml version="1.0">
    <io_devices tag="IO Devices">
        <iodevice type="stimulus_display" tag="Stimulus Display" background_color="0.5, 0.5, 0.5" announce_stimuli_on_implicit_updates="YES"></iodevice>
        <iodevice tag="Eyelink 1000" type="eyelink" data_interval="1ms" tracker_ip="100.1.1.1" eye_rx="" eye_ry="" eye_lx="" eye_ly="" eye_x="" eye_y="" eye_z="" href_rx="" href_ry="" href_lx="" href_ly="" pupil_rx="" pupil_ry="" pupil_lx="eyeRX" pupil_ly="eyeRY" pupil_size_r="pupil_size" pupil_size_l="" eye_time="" tracking_dist="1024"></iodevice>
        <calibrator type="linear_eye_calibrator" tag="Eye Cal" eyeh_raw="eyeRX" eyev_raw="eyeRY" eyeh_calibrated="eye_x" eyev_calibrated="eye_y"></calibrator>
        <iodevice type="nidaq" tag="NIDaq Device" name="Dev1" update_interval="3ms" analog_input_data_interval="1ms" analog_output_data_interval="1ms" assume_multiplexed_adc="YES">
            <iochannel type="nidaq_analog_output_voltage" tag="NIDAQ Analog Output Voltage Channel 0" channel_number="0" range_min="-10.0" range_max="10.0" voltage="ao0"></iochannel>
            <iochannel type="nidaq_digital_output" tag="NIDAQ Digital Output Channel" port_number="1" num_lines_in_port="8" line0="" line1="" line2="" line3="" line4="" line5="" line6="" line7="rewardOut" line8="" line9="" line10="" line11="" line12="" line13="" line14="" line15="" line16="" line17="" line18="" line19="" line20="" line21="" line22="" line23="" line24="" line25="" line26="" line27="" line28="" line29="" line30="" line31=""></iochannel>
        </iodevice>
    </io_devices>
    <variables tag="Variables">
        <folder tag="Eye">
            <variable tag="eyeRX" groups="Eye" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="eyeRY" groups="Eye" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="eye_x" groups="Eye" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="eye_y" groups="Eye" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="pupil_size" groups="Eye" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="IO">
            <variable tag="ao0" groups="I/O" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="doWord" groups="I/O" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="doStrobe" groups="I/O" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="Reward">
            <variable tag="rewardOut" groups="Reward" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="rewardDur" groups="Reward" scope="global" logging="when_changed" default_value="200" type="any" persistant="0"></variable>
        </folder>
        <folder tag="Gobal">
            <variable tag="fix_win" groups="Fixation" scope="global" logging="when_changed" default_value="10" type="any" persistant="1"></variable>
            <variable tag="fixX" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fixY" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fixWaitDur" groups="Fixation" scope="global" logging="when_changed" default_value="10000" type="any" persistant="1"></variable>
            <variable tag="NoFixWaitDur" groups="Fixation" scope="global" logging="when_changed" default_value="5000" type="any" persistant="1"></variable>
            <variable tag="fix_sz" groups="Fixation" scope="global" logging="when_changed" default_value="0.5" type="any" persistant="0"></variable>
            <variable tag="fixOn" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_red" groups="Fixation" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="fix_green" groups="Fixation" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="fix_blue" groups="Fixation" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="targetX" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="targetY" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="target_sz" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="targetOn" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="theta" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="theta_min" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="theta_max" groups="Target" scope="global" logging="when_changed" default_value="315" type="any" persistant="0"></variable>
            <variable tag="theta_N" groups="Target" scope="global" logging="when_changed" default_value="8" type="any" persistant="0"></variable>
            <variable tag="override" groups="Target" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="theta_override" groups="Target" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="amp" groups="Trial" scope="global" logging="when_changed" default_value="10" type="any" persistant="0"></variable>
            <variable tag="pstop" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="startTrial" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="endTrial" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="localTrials" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="trialNum" groups="Trial" scope="global" logging="when_changed" default_value="5000" type="any" persistant="0"></variable>
            <variable tag="consecutiveCorrect" groups="Reward" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="bonusRewDur" groups="Reward" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="dbonus" groups="Reward" scope="global" logging="when_changed" default_value="10" type="any" persistant="0"></variable>
            <variable tag="timeRemaining" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="trialDuration" groups="Trial" scope="global" logging="when_changed" default_value="2000" type="any" persistant="0"></variable>
            <variable tag="on_targ" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="targ_red" groups="Target" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="targ_green" groups="Target" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="targ_blue" groups="Target" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="targ_sz" groups="Target" scope="global" logging="when_changed" default_value="0.5" type="any" persistant="0"></variable>
            <variable tag="target_x" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="target_y" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="target_alpha" groups="Target" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="targetTimeDur" groups="Target" scope="global" logging="when_changed" default_value="1000" type="any" persistant="0"></variable>
            <variable tag="ballTimeDur" groups="Ball" scope="global" logging="when_changed" default_value="1000" type="any" persistant="0"></variable>
            <variable tag="saccadeTimeDur" groups="Trial" scope="global" logging="when_changed" default_value="500" type="any" persistant="0"></variable>
            <variable tag="memoryTimeDur" groups="Memory" scope="global" logging="when_changed" default_value="1000" type="any" persistant="0"></variable>
            <variable tag="GraceTimeDur" groups="Trial" scope="global" logging="when_changed" default_value="100" type="any" persistant="0"></variable>
            <variable tag="fix_time_dur" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_dur_min" groups="Fixation" scope="global" logging="when_changed" default_value="500" type="any" persistant="1"></variable>
            <variable tag="fix_dur_mean" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="1"></variable>
            <variable tag="target_dur_min" groups="Target" scope="global" logging="when_changed" default_value="500" type="any" persistant="1"></variable>
            <variable tag="target_dur_mean" groups="Target" scope="global" logging="when_changed" default_value="0" type="any" persistant="1"></variable>
            <variable tag="memory_dur_min" groups="Memory" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
            <variable tag="memory_dur_mean" groups="Memory" scope="global" logging="when_changed" default_value="0" type="any" persistant="1"></variable>
            <variable tag="iti" groups="Trial" scope="global" logging="when_changed" default_value="750" type="any" persistant="1"></variable>
            <variable tag="timeout" groups="Trial" scope="global" logging="when_changed" default_value="1500" type="any" persistant="1"></variable>
            <variable tag="stimEnding" groups="Trial" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="Fixation+Pursuit">
            <variable tag="pursuitTheta" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="on_fix_dyn" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fixHz" groups="Fixation" scope="global" logging="when_changed" default_value="0.25" type="any" persistant="0"></variable>
            <variable tag="fixDynMag" groups="Fixation" scope="global" logging="when_changed" default_value="5" type="any" persistant="0"></variable>
            <variable tag="tStart" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_pur_trials" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_pur_correct" groups="Fixation" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_pur_HoldDur" groups="Fixation" scope="global" logging="when_changed" default_value="3000" type="any" persistant="1"></variable>
            <variable tag="fix_pur_ITI_Dur" groups="Fixation" scope="global" logging="when_changed" default_value="750" type="any" persistant="1"></variable>
            <variable tag="fix_pur_timeoutDur" groups="Fixation" scope="global" logging="when_changed" default_value="1500" type="any" persistant="1"></variable>
        </folder>
        <folder tag="Fixation+Distractor">
            <variable tag="fix_dis_trials" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="fix_dis_correct" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="distractorOnset_min" groups="Distractor" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
            <variable tag="distractorOnset_mu" groups="Distractor" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
            <variable tag="distractorOnset_time" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="distractorTime_min" groups="Distractor" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
            <variable tag="distractorTime_mu" groups="Distractor" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
            <variable tag="distractorTime" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="distractorSize" groups="Distractor" scope="global" logging="when_changed" default_value="0.5" type="any" persistant="0"></variable>
            <variable tag="distractor_alpha" groups="Distractor" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="distractor_x" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="distractor_y" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="distractorOn" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="DistractorSimultaneous" groups="Distractor" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"></variable>
            <variable tag="fix_dis_ITI_Dur" groups="Distractor" scope="global" logging="when_changed" default_value="750" type="any" persistant="1"></variable>
        </folder>
        <folder tag="OverlapSaccade">
            <variable tag="OverlapSaccade_correct" groups="Overlap" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="OverlapSaccade_trials" groups="Overlap" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="MemorySaccade">
            <variable tag="MemorySaccade_correct" groups="Memory" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="MemorySaccade_trials" groups="Memory" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="MovingBall">
            <variable tag="MovingBall_trials" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="MovingBall_correct" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="interval" groups="MovingBall" scope="global" logging="when_changed" default_value="600" type="any" persistant="0"></variable>
            <variable tag="interval_min" groups="MovingBall" scope="global" logging="when_changed" default_value="600" type="any" persistant="1"></variable>
            <variable tag="interval_max" groups="MovingBall" scope="global" logging="when_changed" default_value="1000" type="any" persistant="1"></variable>
            <variable tag="interval_N" groups="MovingBall" scope="global" logging="when_changed" default_value="5" type="any" persistant="1"></variable>
            <variable tag="Nsets" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="ball_sz" groups="MovingBall" scope="global" logging="when_changed" default_value="0.5" type="any" persistant="1"></variable>
            <variable tag="StartTheta" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="intervalFrames" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="radius" groups="MovingBall" scope="global" logging="when_changed" default_value="10" type="any" persistant="1"></variable>
            <variable tag="ballArcLength" groups="MovingBall" scope="global" logging="when_changed" default_value="180" type="any" persistant="1"></variable>
            <variable tag="ballFeedback_red" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="ballFeedback_green" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="ballFeedback_blue" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="win_fraction" groups="MovingBall" scope="global" logging="when_changed" default_value="0.5" type="any" persistant="1"></variable>
            <variable tag="dwin" scope="global" groups="MovingBall" logging="when_changed" default_value="0.01" type="any" persistant="1"></variable>
            <variable tag="productionInterval" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="acquisitionTime" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="ballAlpha" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="flashAlpha" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="flashRate" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="0"></variable>
            <variable tag="dflashRate" groups="MovingBall" scope="global" logging="when_changed" default_value="0.01" type="any" persistant="0"></variable>
            <variable tag="Interval1_ending" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="Interval2_ending" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="prodBallOn" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="Interval2BallOn" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="Interval1BallOn" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="ready_ended" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="set_ended" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="set2_ended" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="ready_cue_onset_time_us" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="set1_cue_onset_time_us" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="set2_cue_onset_time_us" groups="MovingBall" scope="global" logging="when_changed" default_value="1e1000" type="any" persistant="0"></variable>
            <variable tag="saccade_wait_dur" groups="MovingBall" scope="global" logging="when_changed" default_value="3000" type="any" persistant="0"></variable>
            <variable tag="cue_duration_frames" groups="MovingBall" scope="global" logging="when_changed" default_value="6" type="any" persistant="1"></variable>
            <variable tag="cue_size_deg" groups="MovingBall" scope="global" logging="when_changed" default_value="1" type="any" persistant="1"></variable>
            <variable tag="FeedbackTimeDur" groups="MovingBall" scope="global" logging="when_changed" default_value="200" type="any" persistant="1"></variable>
            <variable tag="afterReady" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"></variable>
            <variable tag="afterSet1" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"></variable>
            <variable tag="afterSet2" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"></variable>
            <variable tag="fixOffMovingBall" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"></variable>
            <variable tag="relativeFixOffTime" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="1"></variable>
            <variable tag="set2Off" groups="MovingBall" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
        </folder>
        <folder tag="Matlab">
            <variable tag="sync" groups="Matlab" scope="global" logging="when_changed" default_value="0" type="any" persistant="0"></variable>
            <variable tag="Nback" groups="Matlab" scope="global" logging="when_changed" default_value="100" type="any" persistant="1"></variable>
        </folder>
    </variables>
    <sounds tag="Sounds"></sounds>
    <stimuli tag="Stimuli">
        <folder tag="Gobal">
            <stimulus type="blank_screen" tag="New Blank Screen" color="0, 0, 0"></stimulus>
            <stimulus type="circular_fixation_point" tag="Fix" color="fix_red,fix_green,fix_blue" trigger_width="fix_win" trigger_watch_x="eye_x" trigger_watch_y="eye_y" trigger_flag="fixOn" x_size="fix_sz" y_size="fix_sz" x_position="fixX" y_position="fixY" rotation="0" alpha_multiplier="1*(!((fixOffMovingBall)*((now()-set2_cue_onset_time_us)/1000 &gt;= interval - relativeFixOffTime)*set2Off))"></stimulus>
            <stimulus type="circular_fixation_point" tag="target" color="targ_red,targ_green,targ_blue" trigger_width="fix_win" trigger_watch_x="eye_x" trigger_watch_y="eye_y" trigger_flag="on_targ" x_size="targ_sz" y_size="targ_sz" x_position="target_x" y_position="target_y" rotation="0" alpha_multiplier="target_alpha"></stimulus>
        </folder>
        <folder tag="Fixation+Pursuit">
            <stimulus type="frame_list" tag="dynamicFix" stimulus_group="dynamicFixFrames" ending="" ended="" loop="YES" repeats="0" autoplay="YES"></stimulus>
            <stimulus_group tag="dynamicFixFrames">
                <stimulus type="circular_fixation_point" tag="fixCircleDyn" color="fix_red,fix_green,fix_blue" trigger_width="fix_win" trigger_watch_x="eye_x" trigger_watch_y="eye_y" trigger_flag="on_fix_dyn" x_size="fix_sz" y_size="fix_sz" x_position="fixX+cos(pursuitTheta*pi()/180)*fixDynMag*sin(2*pi()*fixHz*(nextFrameTime() - tStart)/1e6)" y_position="fixY+sin(pursuitTheta*pi()/180)*fixDynMag*sin(2*pi()*fixHz*(nextFrameTime() - tStart)/1e6)" rotation="0" alpha_multiplier="1"></stimulus>
            </stimulus_group>
        </folder>
        <folder tag="Fixation+Distractor">
            <stimulus type="circle" tag="Distractor" color="1,1,1" x_size="distractorSize" y_size="distractorSize" x_position="distractor_x" y_position="distractor_y" rotation="0" alpha_multiplier="distractor_alpha"></stimulus>
        </folder>
        <folder tag="MovingBall">
            <stimulus type="circle" tag="ballFeedback" color="ballFeedback_red,ballFeedback_green,ballFeedback_blue" x_size="ball_sz" y_size="ball_sz" x_position="radius*cos((pi()/180)*(StartTheta+ballArcLength*(acquisitionTime - tStart)/(1e3*(Nsets+1)*interval)))" y_position="radius*sin((pi()/180)*(StartTheta+ballArcLength*(acquisitionTime - tStart)/(1e3*(Nsets+1)*interval)))" rotation="1" alpha_multiplier="1"></stimulus>
            <stimulus type="frame_list" tag="ready_cue" stimulus_group="ready_frames" ending="" ended="ready_ended" loop="NO" repeats="cue_duration_frames" autoplay="YES"></stimulus>
            <stimulus_group tag="ready_frames">
                <stimulus type="circle" tag="ready_frame" color="1,1,1" x_size="cue_size_deg" y_size="cue_size_deg" x_position="radius*cos(pi()/180*(StartTheta))" y_position="radius*sin(pi()/180*(StartTheta))" rotation="0" alpha_multiplier="flashAlpha"></stimulus>
            </stimulus_group>
            <stimulus type="frame_list" tag="set_cue" stimulus_group="set_frames" ending="" ended="set_ended" loop="NO" repeats="cue_duration_frames" autoplay="YES"></stimulus>
            <stimulus_group tag="set_frames">
                <stimulus type="circle" tag="set_frame" color="1,1,1" x_size="cue_size_deg" y_size="cue_size_deg" x_position="radius*cos(pi()/180*(StartTheta+ballArcLength/3))" y_position="radius*sin(pi()/180*(StartTheta+ballArcLength/3))" rotation="0" alpha_multiplier="flashAlpha"></stimulus>
            </stimulus_group>
            <stimulus type="frame_list" tag="set2_cue" stimulus_group="set2_frames" ending="" ended="set2_ended" loop="NO" repeats="cue_duration_frames" autoplay="YES"></stimulus>
            <stimulus_group tag="set2_frames">
                <stimulus type="circle" tag="set2_frame" color="1,1,1" x_size="cue_size_deg" y_size="cue_size_deg" x_position="radius*cos(pi()/180*(StartTheta+ballArcLength*Nsets/(Nsets+1)))" y_position="radius*sin(pi()/180*(StartTheta+ballArcLength*Nsets/(Nsets+1)))" rotation="0" alpha_multiplier="flashAlpha"></stimulus>
            </stimulus_group>
            <stimulus type="frame_list" tag="Interval1" stimulus_group="Interval1_frames" ending="Interval1_ending" ended="" loop="NO" repeats="intervalFrames" autoplay="YES"></stimulus>
            <stimulus_group tag="Interval1_frames">
                <stimulus type="circle" tag="Interval1Stim" color="0,0,0" x_size="0" y_size="0" x_position="100" y_position="100" rotation="0" alpha_multiplier="0"></stimulus>
            </stimulus_group>
            <stimulus type="frame_list" tag="Interval2" stimulus_group="Interval2_frames" ending="Interval2_ending" ended="" loop="NO" repeats="intervalFrames" autoplay="YES"></stimulus>
            <stimulus_group tag="Interval2_frames">
                <stimulus type="circle" tag="Interval2Stim" color="0,0,0" x_size="0" y_size="0" x_position="100" y_position="100" rotation="0" alpha_multiplier="1"></stimulus>
            </stimulus_group>
            <stimulus type="frame_list" tag="ball" stimulus_group="ballFrames" ended="" ending="stimEnding" repeats="(Nsets+1)*intervalFrames" loop="NO" autoplay="YES"></stimulus>
            <stimulus_group tag="ballFrames">
                <stimulus type="circle" tag="ballDynamic" color="1,1,1" x_size="ball_sz" y_size="ball_sz" x_position="radius*cos((pi()/180)*(StartTheta+ballArcLength*(nextFrameTime() - tStart)/(1e3*(Nsets+1)*interval)))" y_position="radius*sin((pi()/180)*(StartTheta+ballArcLength*(nextFrameTime() - tStart)/(1e3*(Nsets+1)*interval)))" rotation="1" alpha_multiplier="ballAlpha*(!(Nsets == 1))*(rand(0,1) &lt;= flashRate)*(!(!prodBallOn*Interval2_ending))*(!(!Interval2BallOn*Interval1_ending*!Interval2_ending))*(!(!Interval1BallOn*!Interval1_ending)) + ballAlpha*(!(Nsets == 2))*(rand(0,1) &lt;= flashRate)*(!(!prodBallOn*Interval1_ending))*(!(!Interval1BallOn*!Interval1_ending))"></stimulus>
            </stimulus_group>
        </folder>
    </stimuli>
    <filters tag="Filters"></filters>
    <optimizers tag="Optimizers"></optimizers>
    <experiment tag="New Experiment" full_name="" description="">
        <protocol tag="Fixation+Pursuit" nsamples="1" sampling_method="cycles" selection="sequential" interruptible="YES">
            <action tag="Start Eyelink" type="start_device_IO" device="Eyelink 1000"></action>
            <action tag="Start NIDaq Device" type="start_device_IO" device="NIDaq Device"></action>
            <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="0"></action>
            <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
            <action tag="Queue Stimulus 2" type="queue_stimulus" stimulus="New Blank Screen"></action>
            <action tag="Update Stimulus Display 3" type="update_stimulus_display"></action>
            <task_system tag="Trials" interruptible="YES">
                <task_system_state tag="Initial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Begin State System" message="State system beginning"></action>
                    <action type="assignment" tag="Assign localTrials" variable="localTrials" value="0"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Go to Exit" type="direct" target="Trial Start"></transition>
                </task_system_state>
                <task_system_state tag="Fix On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign fix_red" variable="fix_red" value="1"></action>
                    <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="1"></action>
                    <action type="assignment" tag="Assign tStart" variable="tStart" value="nextFrameTime()"></action>
                    <action tag="Live Queue dynamicFix" type="live_queue_stimulus" stimulus="dynamicFix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start fixWait" timer="fixWait" timebase="" duration="fixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If on_fix_dyn, Transition to Trial Start" condition="on_fix_dyn" target="Trial Start"></transition>
                    <transition type="timer_expired" tag="If fixWait Expired, Transition to Failure to fixate" target="Failure to fixate" timer="fixWait"></transition>
                </task_system_state>
                <task_system_state tag="Trial Start" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report fixation acquired" message="Fixation acquired."></action>
                    <action type="assignment" tag="Assign startTrial" variable="startTrial" value="1"></action>
                    <action type="assignment" tag="Assign pursuitTheta" variable="pursuitTheta" value="pursuitTheta"></action>
                    <action type="start_timer" tag="Start HoldFix" timer="HoldFix" timebase="" duration="fix_pur_HoldDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !on_fix_dyn, Transition to Bad" condition="!on_fix_dyn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If HoldFix Expired, Transition to Reward" target="Reward" timer="HoldFix"></transition>
                </task_system_state>
                <task_system_state tag="Reward" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report success" message="Success!"></action>
                    <action type="assignment" tag="Assign fix_red" variable="fix_red" value="0"></action>
                    <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="0"></action>
                    <action type="assignment" tag="Increment consecutiveCorrect" variable="consecutiveCorrect" value="consecutiveCorrect + 1"></action>
                    <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="min(200, (consecutiveCorrect-1)*dbonus)"></action>
                    <action type="pulse" tag="Pulse rewardOut" variable="rewardOut" duration="(rewardDur+bonusRewDur)*1000"></action>
                    <action type="assignment" tag="Increment fix_pur_correct" variable="fix_pur_correct" value="fix_pur_correct+1"></action>
                    <action type="start_timer" tag="Start GreenTime" timer="GreenTime" timebase="" duration="rewardDur+bonusRewDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If GreenTime Expired, Transition to End Trial" target="End Trial" timer="GreenTime"></transition>
                </task_system_state>
                <task_system_state tag="End Trial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report Ending Trial" message="Ending Trial."></action>
                    <action tag="Dequeue dynamicFix" type="dequeue_stimulus" stimulus="dynamicFix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Increment fix_pur_trials" variable="fix_pur_trials" value="fix_pur_trials+1"></action>
                    <action type="assignment" tag="Increment localTrials" variable="localTrials" value="localTrials+1"></action>
                    <action type="assignment" tag="Assign endTrial" variable="endTrial" value="1"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If localTrials &gt;= trialNum, Transition to Exit Fixation Pursuit System" condition="localTrials &gt;= trialNum" target="Exit Fixation Pursuit System"></transition>
                    <transition type="conditional" tag="If pstop, Transition to Exit Fixation Pursuit System" condition="pstop" target="Exit Fixation Pursuit System"></transition>
                    <transition type="direct" tag="Always Go to ITI" target="ITI"></transition>
                </task_system_state>
                <task_system_state tag="ITI" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report ITI" message="ITI."></action>
                    <action type="start_timer" tag="Start fix_pur_ITI" timer="fix_pur_ITI" timebase="" duration="fix_pur_ITI_Dur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If fix_pur_ITI Expired, Transition to Fix On" target="Fix On" timer="fix_pur_ITI"></transition>
                </task_system_state>
                <task_system_state tag="Bad" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report failure" message="Trial Failed."></action>
                    <action tag="Dequeue dynamicFix" type="dequeue_stimulus" stimulus="dynamicFix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
                    <action type="start_timer" tag="Start fix_pur_timeout" timer="fix_pur_timeout" timebase="" duration="fix_pur_timeoutDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If fix_pur_timeout Expired, Transition to End Trial" target="End Trial" timer="fix_pur_timeout"></transition>
                </task_system_state>
                <task_system_state tag="Failure to fixate" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report Failure to fixate" message="Failure to fixate."></action>
                    <action tag="Dequeue dynamicFix" type="dequeue_stimulus" stimulus="dynamicFix"></action>
                    <action type="start_timer" tag="Start NoFixWait" timer="NoFixWait" timebase="" duration="NoFixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If NoFixWait Expired, Transition to Fix On" target="Fix On" timer="NoFixWait"></transition>
                </task_system_state>
                <task_system_state tag="Exit Fixation Pursuit System" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Exit State System" message="Leaving state system"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Return to parent task system" type="yield"></transition>
                </task_system_state>
            </task_system>
        </protocol>
        <protocol tag="Fixation+Distractor" nsamples="1" sampling_method="cycles" selection="sequential" interruptible="YES">
            <action tag="Start NIDaq Device" type="start_device_IO" device="NIDaq Device"></action>
            <action tag="Start Eyelink" type="start_device_IO" device="Eyelink 1000"></action>
            <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="0"></action>
            <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
            <action tag="Queue Stimulus 2" type="queue_stimulus" stimulus="New Blank Screen"></action>
            <action tag="Update Stimulus Display 3" type="update_stimulus_display"></action>
            <task_system tag="Trials" interruptible="YES">
                <task_system_state tag="Initial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Begin State System" message="State system beginning"></action>
                    <action type="assignment" tag="Assign localTrials" variable="localTrials" value="0"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Go to Exit" type="direct" target="Trial Start"></transition>
                </task_system_state>
                <task_system_state tag="Fix On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign fix_red" variable="fix_red" value="1"></action>
                    <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="1"></action>
                    <action type="if_else" tag="If/Else">
                        <action type="if" tag="If override, use theta_override" condition="override">
                            <action type="assignment" tag="Set theta" variable="theta" value="theta_override"></action>
                        </action>
                        <action type="if" tag="Else, Select theta randomly" condition="1">
                            <action type="assignment" tag="Select theta" variable="theta" value="theta_min + disc_rand(0,theta_N-1)*(theta_max-theta_min)/(theta_N-1)"></action>
                        </action>
                    </action>
                    <action type="assignment" tag="Assign distractor_x" variable="distractor_x" value="amp*cos(theta*pi()/180)"></action>
                    <action type="assignment" tag="Assign distractor_y" variable="distractor_y" value="amp*sin(theta*pi()/180)"></action>
                    <action tag="Live Queue Fix" type="live_queue_stimulus" stimulus="Fix"></action>
                    <action type="if" tag="Conditionally Execute Actions" condition="DistractorSimultaneous">
                        <action tag="Live Queue Distractor" type="live_queue_stimulus" stimulus="Distractor"></action>
                    </action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start fixWait" timer="fixWait" timebase="" duration="fixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn, Transition to Trial Start" condition="fixOn" target="Trial Start"></transition>
                    <transition type="timer_expired" tag="If fixWait Expired, Transition to Failure to fixate" target="Failure to fixate" timer="fixWait"></transition>
                </task_system_state>
                <task_system_state tag="Trial Start" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report fixation acquired" message="Fixation acquired."></action>
                    <action type="assignment" tag="Assign startTrial" variable="startTrial" value="1"></action>
                    <action type="assignment" tag="Assign pursuitTheta" variable="pursuitTheta" value="pursuitTheta"></action>
                    <action type="assignment" tag="Assign distractorOnset_time" variable="distractorOnset_time" value="-distractorOnset_mu*logn(rand(0,1)) + distractorOnset_min"></action>
                    <action type="start_timer" tag="Start DistractorWait" timer="DistractorWait" timebase="" duration="distractorOnset_time" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If HoldFix Expired, Transition to DistractorOn" target="DistractorOn" timer="DistractorWait"></transition>
                </task_system_state>
                <task_system_state tag="DistractorOn" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Live Queue Distractor" type="live_queue_stimulus" stimulus="Distractor"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign distractorOn" variable="distractorOn" value="1"></action>
                    <action type="assignment" tag="Assign distractorTime" variable="distractorTime" value="-distractorTime_mu*logn(rand(0,1)) + distractorTime_min"></action>
                    <action type="start_timer" tag="Start DistractorTime" timer="DistractorTime" timebase="" duration="distractorTime" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If DistractorTime Expired, Transition to DistractorOff" target="DistractorOff" timer="DistractorTime"></transition>
                </task_system_state>
                <task_system_state tag="DistractorOff" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Distractor" type="dequeue_stimulus" stimulus="Distractor"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign timeRemaining" variable="timeRemaining" value="trialDuration-distractorOnset_time - distractorTime"></action>
                    <action type="start_timer" tag="Start RemainingTime" timer="RemainingTime" timebase="" duration="timeRemaining" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If RemainingTime Expired, Transition to Reward" target="Reward" timer="RemainingTime"></transition>
                </task_system_state>
                <task_system_state tag="Reward" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report success" message="Success!"></action>
                    <action type="assignment" tag="Assign fix_red" variable="fix_red" value="0"></action>
                    <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="0"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Increment consecutiveCorrect" variable="consecutiveCorrect" value="consecutiveCorrect + 1"></action>
                    <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="(consecutiveCorrect-1)*dbonus"></action>
                    <action type="pulse" tag="Pulse rewardOut" variable="rewardOut" duration="(rewardDur+bonusRewDur)*1000"></action>
                    <action type="assignment" tag="Increment fix_dis_correct" variable="fix_dis_correct" value="fix_dis_correct+1"></action>
                    <action type="start_timer" tag="Start GreenTime" timer="GreenTime" timebase="" duration="rewardDur+bonusRewDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If GreenTime Expired, Transition to End Trial" target="End Trial" timer="GreenTime"></transition>
                </task_system_state>
                <task_system_state tag="End Trial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report Ending Trial" message="Ending Trial."></action>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Increment fix_dis_trials" variable="fix_dis_trials" value="fix_dis_trials+1"></action>
                    <action type="assignment" tag="Increment localTrials" variable="localTrials" value="localTrials+1"></action>
                    <action type="assignment" tag="Assign endTrial" variable="endTrial" value="1"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If localTrials &gt;= trialNum, Transition to Exit Fixation Distractor System" condition="localTrials &gt;= trialNum" target="Exit Fixation Distractor System"></transition>
                    <transition type="conditional" tag="If pstop, Transition to Exit Fixation Distractor System" condition="pstop" target="Exit Fixation Distractor System"></transition>
                    <transition type="direct" tag="Always Go to ITI" target="ITI"></transition>
                </task_system_state>
                <task_system_state tag="ITI" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report ITI" message="ITI."></action>
                    <action type="start_timer" tag="Start fix_dis_ITI" timer="fix_dis_ITI" timebase="" duration="fix_dis_ITI_Dur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If fix_pur_ITI Expired, Transition to Fix On" target="Fix On" timer="fix_dis_ITI"></transition>
                </task_system_state>
                <task_system_state tag="Bad" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report failure" message="Trial Failed."></action>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue Distractor" type="dequeue_stimulus" stimulus="Distractor"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
                    <action type="start_timer" tag="Start fix_pur_timeout" timer="fix_pur_timeout" timebase="" duration="fix_pur_timeoutDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If fix_pur_timeout Expired, Transition to End Trial" target="End Trial" timer="fix_pur_timeout"></transition>
                </task_system_state>
                <task_system_state tag="Failure to fixate" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report Failure to fixate" message="Failure to fixate."></action>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue Distractor" type="dequeue_stimulus" stimulus="Distractor"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start NoFixWait" timer="NoFixWait" timebase="" duration="NoFixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If NoFixWait Expired, Transition to Fix On" target="Fix On" timer="NoFixWait"></transition>
                </task_system_state>
                <task_system_state tag="Exit Fixation Distractor System" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Exit State System" message="Leaving state system"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Return to parent task system" type="yield"></transition>
                </task_system_state>
            </task_system>
        </protocol>
        <protocol tag="OverlapSaccade" nsamples="1" sampling_method="cycles" selection="sequential" interruptible="YES">
            <action tag="Start Eyelink" type="start_device_IO" device="Eyelink 1000"></action>
            <action tag="Start NIDaq Device" type="start_device_IO" device="NIDaq Device"></action>
            <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="0"></action>
            <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
            <action type="assignment" tag="Assign pstop" variable="pstop" value="0"></action>
            <action type="assignment" tag="Assign fix_red" variable="fix_red" value="1"></action>
            <action type="assignment" tag="Assign fix_green" variable="fix_green" value="1"></action>
            <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="1"></action>
            <action tag="Queue Stimulus 3" type="queue_stimulus" stimulus="New Blank Screen"></action>
            <action tag="Update Stimulus Display 4" type="update_stimulus_display"></action>
            <task_system tag="Trials" interruptible="YES">
                <task_system_state tag="Initial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Begin State System" message="State system beginning"></action>
                    <action type="assignment" tag="Assign localTrials" variable="localTrials" value="0"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Go to Fix On" type="direct" target="Fix On"></transition>
                </task_system_state>
                <task_system_state tag="Fix On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign targ_red" variable="targ_red" value="1"></action>
                    <action type="assignment" tag="Assign targ_blue" variable="targ_blue" value="1"></action>
                    <action tag="Live Queue Fix" type="live_queue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start fixWait" timer="fixWait" timebase="" duration="fixWaitDur" duration_units="ms"></action>
                    <action type="report" tag="Report fix on" message="Fixation on."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn, Transition to Trial Start" condition="fixOn" target="Trial Start"></transition>
                    <transition type="timer_expired" tag="If fix_wait Expired, Transition to No Fix" target="No Fix" timer="fixWait"></transition>
                </task_system_state>
                <task_system_state tag="Grace" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="start_timer" tag="Start GraceTime" timer="GraceTime" timebase="" duration="GraceTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to No Fix" condition="!fixOn" target="No Fix"></transition>
                    <transition type="timer_expired" tag="If GraceTime Expired, Transition to Trial Start" target="Trial Start" timer="GraceTime"></transition>
                </task_system_state>
                <task_system_state tag="Trial Start" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign startTrial" variable="startTrial" value="1"></action>
                    <action type="assignment" tag="Select theta" variable="theta" value="theta_min + disc_rand(0,theta_N-1)*(theta_max-theta_min)/(theta_N-1)"></action>
                    <action type="if" tag="If override, use theta_override" condition="override">
                        <action type="assignment" tag="Set theta" variable="theta" value="theta_override"></action>
                    </action>
                    <action type="assignment" tag="Set target_x" variable="target_x" value="amp*cos(theta*pi()/180)"></action>
                    <action type="assignment" tag="Set target_y" variable="target_y" value="amp*sin(theta*pi()/180)"></action>
                    <action type="report" tag="Annonce target direction" message="target direction = $theta"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="direct" tag="Always Go to Fix Time" target="Fix Time"></transition>
                </task_system_state>
                <task_system_state tag="Fix Time" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Determine time to target on" variable="fix_time_dur" value="-fix_dur_mean*logn(rand(0,1)) + fix_dur_min"></action>
                    <action type="start_timer" tag="Start fix_time" timer="fix_time" timebase="" duration="fix_time_dur" duration_units="ms"></action>
                    <action type="report" tag="Report fixating" message="Fixating."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If fix_time Expired, Transition to Target On" target="Target On" timer="fix_time"></transition>
                </task_system_state>
                <task_system_state tag="Target On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Live Queue target" type="live_queue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Deterimine time to until fix off" variable="targetTimeDur" value="-target_dur_mean*logn(rand(0,1)) + target_dur_min"></action>
                    <action type="start_timer" tag="Start targetTime" timer="targetTime" timebase="" duration="targetTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If targetTime Expired, Transition to Fix Off" target="Fix Off" timer="targetTime"></transition>
                </task_system_state>
                <task_system_state tag="Fix Off" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start saccadeTime" timer="saccadeTime" timebase="" duration="saccadeTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If on_targ, Transition to Reward" condition="on_targ" target="Reward"></transition>
                    <transition type="timer_expired" tag="If saccadeTime Expired, Transition to Bad" target="Bad" timer="saccadeTime"></transition>
                </task_system_state>
                <task_system_state tag="Reward" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report success" message="Success!"></action>
                    <action type="assignment" tag="Set targ_red to 0" variable="targ_red" value="0"></action>
                    <action type="assignment" tag="Set targ_blue to 0" variable="targ_blue" value="0"></action>
                    <action type="assignment" tag="Increment consecutiveCorrect" variable="consecutiveCorrect" value="consecutiveCorrect + 1"></action>
                    <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="(consecutiveCorrect-1)*dbonus"></action>
                    <action type="pulse" tag="Pulse rewardOut" variable="rewardOut" duration="(rewardDur+bonusRewDur)*1000"></action>
                    <action type="assignment" tag="Increment OverlapSaccade_correct" variable="OverlapSaccade_correct" value="OverlapSaccade_correct+1"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start GreenTime" timer="GreenTime" timebase="" duration="rewardDur+bonusRewDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If GreenTime Expired, Transition to End Trial" target="End Trial" timer="GreenTime"></transition>
                </task_system_state>
                <task_system_state tag="End Trial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action type="assignment" tag="Increment OverlapSaccade_trials" variable="OverlapSaccade_trials" value="OverlapSaccade_trials+1"></action>
                    <action type="assignment" tag="Increment localTrials" variable="localTrials" value="localTrials+1"></action>
                    <action type="assignment" tag="Assign endTrial" variable="endTrial" value="1"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If localTrials == trialNum, Transition to Exit State System" condition="localTrials &gt;= trialNum || pstop" target="Exit State System"></transition>
                    <transition type="direct" tag="Always Go to ITI" target="ITI"></transition>
                </task_system_state>
                <task_system_state tag="ITI" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start ITI" timer="ITI" timebase="" duration="iti" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If ITI Expired, Transition to Fix On" target="Fix On" timer="ITI"></transition>
                </task_system_state>
                <task_system_state tag="Bad" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
                    <action type="report" tag="Report failure" message="Failure."></action>
                    <action type="start_timer" tag="Start Timeout" timer="Timeout" timebase="" duration="timeout" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If Timeout Expired, Transition to End Trial" target="End Trial" timer="Timeout"></transition>
                </task_system_state>
                <task_system_state tag="No Fix" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="report" tag="Report no fixation" message="Failed to fixate."></action>
                    <action type="start_timer" tag="Start NoFixWait" timer="NoFixWait" timebase="" duration="NoFixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If NoFixWait Expired, Transition to Fix On" target="Fix On" timer="NoFixWait"></transition>
                </task_system_state>
                <task_system_state tag="Exit State System" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Exit State System" message="Leaving state system"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Return to parent task system" type="yield"></transition>
                </task_system_state>
            </task_system>
        </protocol>
        <protocol tag="MemorySaccade" nsamples="1" sampling_method="cycles" selection="sequential" interruptible="YES">
            <action tag="Start Eyelink" type="start_device_IO" device="Eyelink 1000"></action>
            <action tag="Start NIDaq Device" type="start_device_IO" device="NIDaq Device"></action>
            <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="0"></action>
            <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
            <action type="assignment" tag="Assign pstop" variable="pstop" value="0"></action>
            <action type="assignment" tag="Assign fix_red" variable="fix_red" value="1"></action>
            <action type="assignment" tag="Assign fix_green" variable="fix_green" value="1"></action>
            <action type="assignment" tag="Assign fix_blue" variable="fix_blue" value="1"></action>
            <action tag="Queue Stimulus 2" type="queue_stimulus" stimulus="New Blank Screen"></action>
            <action tag="Update Stimulus Display 3" type="update_stimulus_display"></action>
            <task_system tag="Trials" interruptible="YES">
                <task_system_state tag="Initial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Begin State System" message="State system beginning"></action>
                    <action type="assignment" tag="Assign localTrials" variable="localTrials" value="0"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Go to Fix On" type="direct" target="Fix On"></transition>
                </task_system_state>
                <task_system_state tag="Fix On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign targ_red" variable="targ_red" value="1"></action>
                    <action type="assignment" tag="Assign targ_blue" variable="targ_blue" value="1"></action>
                    <action tag="Live Queue Fix" type="live_queue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start fixWait" timer="fixWait" timebase="" duration="fixWaitDur" duration_units="ms"></action>
                    <action type="report" tag="Report fix on" message="Fixation on."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn, Transition to Trial Start" condition="fixOn" target="Trial Start"></transition>
                    <transition type="timer_expired" tag="If fix_wait Expired, Transition to No Fix" target="No Fix" timer="fixWait"></transition>
                </task_system_state>
                <task_system_state tag="Grace" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="start_timer" tag="Start GraceTime" timer="GraceTime" timebase="" duration="GraceTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to No Fix" condition="!fixOn" target="No Fix"></transition>
                    <transition type="timer_expired" tag="If GraceTime Expired, Transition to Trial Start" target="Trial Start" timer="GraceTime"></transition>
                </task_system_state>
                <task_system_state tag="Trial Start" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign startTrial" variable="startTrial" value="1"></action>
                    <action type="assignment" tag="Select theta" variable="theta" value="theta_min + disc_rand(0,theta_N-1)*(theta_max-theta_min)/(theta_N-1)"></action>
                    <action type="if" tag="If override, use theta_override" condition="override">
                        <action type="assignment" tag="Set theta" variable="theta" value="theta_override"></action>
                    </action>
                    <action type="assignment" tag="Set target_x" variable="target_x" value="amp*cos(theta*pi()/180)"></action>
                    <action type="assignment" tag="Set target_y" variable="target_y" value="amp*sin(theta*pi()/180)"></action>
                    <action type="report" tag="Annonce target direction" message="target direction = $theta"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="direct" tag="Always Go to Fix Time" target="Fix Time"></transition>
                </task_system_state>
                <task_system_state tag="Fix Time" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Determine time to target on" variable="fix_time_dur" value="-fix_dur_mean*logn(rand(0,1)) + fix_dur_min"></action>
                    <action type="start_timer" tag="Start fix_time" timer="fix_time" timebase="" duration="fix_time_dur" duration_units="ms"></action>
                    <action type="report" tag="Report fixating" message="Fixating."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If fix_time Expired, Transition to Target On" target="Target On" timer="fix_time"></transition>
                </task_system_state>
                <task_system_state tag="Target On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Live Queue target" type="live_queue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Deterimine time to until fix off" variable="targetTimeDur" value="-target_dur_mean*logn(rand(0,1)) + target_dur_min"></action>
                    <action type="start_timer" tag="Start targetTime" timer="targetTime" timebase="" duration="targetTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If targetTime Expired, Transition to Memory Time" target="Memory Time" timer="targetTime"></transition>
                </task_system_state>
                <task_system_state tag="Memory Time" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Deterimine time to until fix off" variable="memoryTimeDur" value="-memory_dur_mean*logn(rand(0,1)) + memory_dur_min"></action>
                    <action type="start_timer" tag="Start memoryTime" timer="memoryTime" timebase="" duration="memoryTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Bad" condition="!fixOn" target="Bad"></transition>
                    <transition type="timer_expired" tag="If memoryTime Expired, Transition to Fix Off" target="Fix Off" timer="memoryTime"></transition>
                </task_system_state>
                <task_system_state tag="Fix Off" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start saccadeTime" timer="saccadeTime" timebase="" duration="saccadeTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If on_targ, Transition to Reward" condition="on_targ" target="Reward"></transition>
                    <transition type="timer_expired" tag="If saccadeTime Expired, Transition to Bad" target="Bad" timer="saccadeTime"></transition>
                </task_system_state>
                <task_system_state tag="Reward" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report success" message="Success!"></action>
                    <action type="assignment" tag="Set targ_red to 0" variable="targ_red" value="0"></action>
                    <action type="assignment" tag="Set targ_blue to 0" variable="targ_blue" value="0"></action>
                    <action tag="Live Queue target" type="live_queue_stimulus" stimulus="target"></action>
                    <action type="assignment" tag="Increment consecutiveCorrect" variable="consecutiveCorrect" value="consecutiveCorrect + 1"></action>
                    <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="(consecutiveCorrect-1)*dbonus"></action>
                    <action type="pulse" tag="Pulse rewardOut" variable="rewardOut" duration="(rewardDur+bonusRewDur)*1000"></action>
                    <action type="assignment" tag="Increment MemorySaccade_correct" variable="MemorySaccade_correct" value="MemorySaccade_correct+1"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start GreenTime" timer="GreenTime" timebase="" duration="rewardDur+bonusRewDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If GreenTime Expired, Transition to End Trial" target="End Trial" timer="GreenTime"></transition>
                </task_system_state>
                <task_system_state tag="End Trial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action type="assignment" tag="Increment MemorySaccade_trials" variable="MemorySaccade_trials" value="MemorySaccade_trials+1"></action>
                    <action type="assignment" tag="Increment localTrials" variable="localTrials" value="localTrials+1"></action>
                    <action type="assignment" tag="Assign endTrial" variable="endTrial" value="1"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If localTrials == trialNum, Transition to Exit State System" condition="localTrials &gt;= trialNum || pstop" target="Exit State System"></transition>
                    <transition type="direct" tag="Always Go to ITI" target="ITI"></transition>
                </task_system_state>
                <task_system_state tag="ITI" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start ITI" timer="ITI" timebase="" duration="iti" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If ITI Expired, Transition to Fix On" target="Fix On" timer="ITI"></transition>
                </task_system_state>
                <task_system_state tag="Bad" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
                    <action type="report" tag="Report failure" message="Failure."></action>
                    <action type="start_timer" tag="Start Timeout" timer="Timeout" timebase="" duration="timeout" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If Timeout Expired, Transition to End Trial" target="End Trial" timer="Timeout"></transition>
                </task_system_state>
                <task_system_state tag="No Fix" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="report" tag="Report no fixation" message="Failed to fixate."></action>
                    <action type="start_timer" tag="Start NoFixWait" timer="NoFixWait" timebase="" duration="NoFixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If NoFixWait Expired, Transition to Fix On" target="Fix On" timer="NoFixWait"></transition>
                </task_system_state>
                <task_system_state tag="Exit State System" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Exit State System" message="Leaving state system"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Return to parent task system" type="yield"></transition>
                </task_system_state>
            </task_system>
        </protocol>
        <protocol tag="MovingBall" nsamples="1" sampling_method="cycles" selection="sequential" interruptible="YES">
            <action tag="Start Eyelink" type="start_device_IO" device="Eyelink 1000"></action>
            <action tag="Start NIDaq Device" type="start_device_IO" device="NIDaq Device"></action>
            <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="0"></action>
            <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
            <action tag="Queue Stimulus" type="queue_stimulus" stimulus="New Blank Screen"></action>
            <action tag="Update Stimulus Display 2" type="update_stimulus_display"></action>
            <task_system tag="Trials" interruptible="YES">
                <task_system_state tag="Initial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Begin State System" message="State system beginning"></action>
                    <action type="assignment" tag="Assign localTrials" variable="localTrials" value="0"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Go to Fix On" type="direct" target="Fix On"></transition>
                </task_system_state>
                <task_system_state tag="Fix On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign targ_red" variable="targ_red" value="1"></action>
                    <action type="assignment" tag="Assign targ_blue" variable="targ_blue" value="1"></action>
                    <action type="assignment" tag="Assign ballFeedback_red" variable="ballFeedback_red" value="1"></action>
                    <action type="assignment" tag="Assign ballFeedback_blue" variable="ballFeedback_blue" value="1"></action>
                    <action type="assignment" tag="Assign afterReady" variable="afterReady" value="0"></action>
                    <action type="assignment" tag="Assign afterSet1" variable="afterSet1" value="0"></action>
                    <action type="assignment" tag="Assign afterSet2" variable="afterSet2" value="0"></action>
                    <action tag="Live Queue Fix" type="live_queue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start fixWait" timer="fixWait" timebase="" duration="fixWaitDur" duration_units="ms"></action>
                    <action type="report" tag="Report fix on" message="Fixation on."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn, Transition to Trial Start" condition="fixOn" target="Trial Start"></transition>
                    <transition type="timer_expired" tag="If fix_wait Expired, Transition to No Fix" target="No Fix" timer="fixWait"></transition>
                </task_system_state>
                <task_system_state tag="Grace" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="start_timer" tag="Start GraceTime" timer="GraceTime" timebase="" duration="GraceTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to No Fix" condition="!fixOn" target="No Fix"></transition>
                    <transition type="timer_expired" tag="If GraceTime Expired, Transition to Trial Start" target="Trial Start" timer="GraceTime"></transition>
                </task_system_state>
                <task_system_state tag="Trial Start" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign startTrial" variable="startTrial" value="1"></action>
                    <action type="assignment" tag="Assign sync" variable="sync" value="1"></action>
                    <action type="assignment" tag="Reset stimEnding" variable="stimEnding" value="0"></action>
                    <action type="assignment" tag="Select theta" variable="theta" value="theta_min + disc_rand(0,theta_N-1)*(theta_max-theta_min)/(theta_N-1)"></action>
                    <action type="if" tag="If override, use theta_override" condition="override">
                        <action type="assignment" tag="Set theta" variable="theta" value="theta_override"></action>
                    </action>
                    <action type="assignment" tag="Set target_x" variable="target_x" value="amp*cos(theta*pi()/180)"></action>
                    <action type="assignment" tag="Set target_y" variable="target_y" value="amp*sin(theta*pi()/180)"></action>
                    <action type="assignment" tag="Select interval" variable="interval" value="interval_min + disc_rand(0,interval_N-1)*(interval_max-interval_min)/(interval_N-1)"></action>
                    <action type="assignment" tag="Assign intervalFrames" variable="intervalFrames" value="round(refreshRate()*interval/1000)"></action>
                    <action type="assignment" tag="Assign saccade_wait_dur" variable="saccade_wait_dur" value="(Nsets+1)*interval"></action>
                    <action type="assignment" tag="Assign StartTheta" variable="StartTheta" value="theta-ballArcLength"></action>
                    <action type="assignment" tag="Assign Nsets" variable="Nsets" value="Nsets"></action>
                    <action type="report" tag="Annonce target direction" message="target direction = $theta"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn, Transition to Abort" condition="!fixOn" target="Abort"></transition>
                    <transition type="direct" tag="Always Go to Fix Time" target="Fix Time"></transition>
                </task_system_state>
                <task_system_state tag="Fix Time" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Determine time to target on" variable="fix_time_dur" value="-fix_dur_mean*logn(rand(0,1)) + fix_dur_min"></action>
                    <action type="start_timer" tag="Start fix_time" timer="fix_time" timebase="" duration="fix_time_dur" duration_units="ms"></action>
                    <action type="report" tag="Report fixating" message="Fixating."></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Abort" condition="!fixOn" target="Abort"></transition>
                    <transition type="timer_expired" tag="If fix_time Expired, Transition to Target On" target="Target On" timer="fix_time"></transition>
                </task_system_state>
                <task_system_state tag="Target On" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Live Queue target" type="live_queue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Deterimine time to until fix off" variable="targetTimeDur" value="-target_dur_mean*logn(rand(0,1)) + target_dur_min"></action>
                    <action type="start_timer" tag="Start targetTime" timer="targetTime" timebase="" duration="targetTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to Abort" condition="!fixOn" target="Abort"></transition>
                    <transition type="timer_expired" tag="If targetTime Expired, Transition to Ready" target="Ready" timer="targetTime"></transition>
                </task_system_state>
                <task_system_state tag="Ready" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign tStart" variable="tStart" value="nextFrameTime()"></action>
                    <action type="assignment" tag="Reset ready_ended" variable="ready_ended" value="0"></action>
                    <action tag="Live Queue ball" type="live_queue_stimulus" stimulus="ball"></action>
                    <action tag="Queue ready cue" type="queue_stimulus" stimulus="ready_cue"></action>
                    <action tag="Queue Interval1" type="queue_stimulus" stimulus="Interval1"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Store ready cue onset time" variable="ready_cue_onset_time_us" value="now()"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to After Ready" condition="!fixOn" target="After Ready"></transition>
                    <transition type="conditional" tag="When Interval1_ending, go to Set" condition="Interval1_ending &amp;&amp; Nsets == 1" target="Set 2"></transition>
                    <transition type="conditional" tag="When Interval1_ending, go to Set" condition="Interval1_ending &amp;&amp; Nsets == 2" target="Set"></transition>
                </task_system_state>
                <task_system_state tag="Set" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Queue Interval2" type="queue_stimulus" stimulus="Interval2"></action>
                    <action tag="Dequeue ready cue" type="dequeue_stimulus" stimulus="ready_cue"></action>
                    <action type="assignment" tag="Reset set_ended" variable="set_ended" value="0"></action>
                    <action tag="Queue set cue" type="queue_stimulus" stimulus="set_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Store set cue onset time" variable="set1_cue_onset_time_us" value="now()"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to After Set1" condition="!fixOn" target="After Set1"></transition>
                    <transition type="conditional" tag="When set cue presentation completes, go to Set 2" condition="Interval2_ending" target="Set 2"></transition>
                </task_system_state>
                <task_system_state tag="Set 2" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue set cue" type="dequeue_stimulus" stimulus="set_cue"></action>
                    <action tag="Dequeue ready cue" type="dequeue_stimulus" stimulus="ready_cue"></action>
                    <action type="assignment" tag="Reset set_ended" variable="set_ended" value="0"></action>
                    <action type="assignment" tag="Reset set2_ended" variable="set2_ended" value="0"></action>
                    <action tag="Queue set2 cue" type="queue_stimulus" stimulus="set2_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="if" tag="If Nsets == 1, set cue onset time" condition="Nsets == 1">
                        <action type="assignment" tag="Store set cue onset time" variable="set1_cue_onset_time_us" value="now()"></action>
                    </action>
                    <action type="assignment" tag="Store set2 cue onset time" variable="set2_cue_onset_time_us" value="now()"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If fixOn == 0, Transition to After Set1" condition="!fixOn" target="After Set1"></transition>
                    <transition type="conditional" tag="When set2 cue presentation completes, go to Production Interval" condition="set2_ended" target="Production Interval"></transition>
                </task_system_state>
                <task_system_state tag="Production Interval" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Store set2Off" variable="set2Off" value="1"></action>
                    <action tag="Dequeue set2 cue" type="dequeue_stimulus" stimulus="set2_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign afterSet2" variable="afterSet2" value="1"></action>
                    <action type="start_timer" tag="Start saccade_wait" timer="saccade_wait" timebase="" duration="saccade_wait_dur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If !fixOn Transition to Production" condition="!fixOn" target="Production"></transition>
                    <transition type="timer_expired" tag="If saccade_wait Expired, Transition to Production" target="Production" timer="saccade_wait"></transition>
                </task_system_state>
                <task_system_state tag="Production" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start saccadeTime" timer="saccadeTime" timebase="" duration="saccadeTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If on_targ, Transition to TargetAcquired" condition="on_targ" target="TargetAcquired"></transition>
                    <transition type="timer_expired" tag="If saccadeTime Expired, Transition to No Saccade" target="No Saccade" timer="saccadeTime"></transition>
                </task_system_state>
                <task_system_state tag="TargetAcquired" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Assign productionInterval" variable="productionInterval" value="(now()-set2_cue_onset_time_us)/1000"></action>
                    <action type="assignment" tag="Assign acquisitionTime" variable="acquisitionTime" value="now()"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If correct, Transition to Reward" condition="abs(productionInterval - interval)/interval &lt;= win_fraction" target="Reward"></transition>
                    <transition type="direct" tag="Always Go to Early or Late" target="Early or Late"></transition>
                </task_system_state>
                <task_system_state tag="Reward" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report success" message="Success!"></action>
                    <action type="assignment" tag="Set targ_red to 0" variable="targ_red" value="0"></action>
                    <action type="assignment" tag="Set targ_blue to 0" variable="targ_blue" value="0"></action>
                    <action type="assignment" tag="Set ballFeedback_red to 0" variable="ballFeedback_red" value="0"></action>
                    <action type="assignment" tag="Set ballFeedback_blue to 0" variable="ballFeedback_blue" value="0"></action>
                    <action tag="Live Queue ballFeedback" type="live_queue_stimulus" stimulus="ballFeedback"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="assignment" tag="Assign win_fraction" variable="win_fraction" value="win_fraction-dwin"></action>
                    <action type="assignment" tag="Assign flashRate" variable="flashRate" value="flashRate-dflashRate"></action>
                    <action type="assignment" tag="Increment consecutiveCorrect" variable="consecutiveCorrect" value="consecutiveCorrect + 1"></action>
                    <action type="assignment" tag="Assign bonusRewDur" variable="bonusRewDur" value="min(200, (consecutiveCorrect-1)*dbonus)"></action>
                    <action type="pulse" tag="Pulse rewardOut" variable="rewardOut" duration="bonusRewDur*1000+rewardDur*1000*max(0.00001,1-abs(productionInterval - interval)/interval/win_fraction )"></action>
                    <action type="assignment" tag="Increment MovingBall_correct" variable="MovingBall_correct" value="MovingBall_correct+1"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start GreenTime" timer="GreenTime" timebase="" duration="bonusRewDur+rewardDur*max(0.00001,1-abs(productionInterval - interval)/interval/win_fraction )" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If GreenTime Expired, Transition to End Trial" target="End Trial" timer="GreenTime"></transition>
                </task_system_state>
                <task_system_state tag="End Trial" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Dequeue ballFeedback" type="dequeue_stimulus" stimulus="ballFeedback"></action>
                    <action tag="Dequeue Interval1" type="dequeue_stimulus" stimulus="Interval1"></action>
                    <action tag="Dequeue Interval2" type="dequeue_stimulus" stimulus="Interval2"></action>
                    <action tag="Stop ready cue" type="stop_dynamic_stimulus" stimulus="ready_cue"></action>
                    <action tag="Stop set cue" type="stop_dynamic_stimulus" stimulus="set_cue"></action>
                    <action tag="Stop set2 cue" type="stop_dynamic_stimulus" stimulus="set2_cue"></action>
                    <action tag="Stop Interval1" type="stop_dynamic_stimulus" stimulus="Interval1"></action>
                    <action tag="Stop Interval2" type="stop_dynamic_stimulus" stimulus="Interval2"></action>
                    <action type="assignment" tag="Increment MovingBall_trials" variable="MovingBall_trials" value="MovingBall_trials+1"></action>
                    <action type="assignment" tag="Increment localTrials" variable="localTrials" value="localTrials+1"></action>
                    <action type="assignment" tag="Reset Interval1_ending" variable="Interval1_ending" value="0"></action>
                    <action type="assignment" tag="Reset Interval2_ending" variable="Interval2_ending" value="0"></action>
                    <action type="assignment" tag="Reset ready_ended" variable="ready_ended" value="0"></action>
                    <action type="assignment" tag="Reset set_ended" variable="set_ended" value="0"></action>
                    <action type="assignment" tag="Reset set2_ended" variable="set_ended" value="0"></action>
                    <action type="assignment" tag="Assign Nback" variable="Nback" value="Nback"></action>
                    <action type="assignment" tag="Store set2Off" variable="set2Off" value="0"></action>
                    <action type="assignment" tag="Assign sync" variable="sync" value="0"></action>
                    <action type="assignment" tag="Assign endTrial" variable="endTrial" value="1"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="conditional" tag="If localTrials == trialNum, Transition to Exit State System" condition="localTrials &gt;= trialNum || pstop" target="Exit State System"></transition>
                    <transition type="direct" tag="Always Go to ITI" target="ITI"></transition>
                </task_system_state>
                <task_system_state tag="ITI" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start ITI" timer="ITI" timebase="" duration="iti" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If ITI Expired, Transition to Fix On" target="Fix On" timer="ITI"></transition>
                </task_system_state>
                <task_system_state tag="Early or Late" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Live Queue ballFeedback" type="live_queue_stimulus" stimulus="ballFeedback"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="start_timer" tag="Start FeedbackTime" timer="FeedbackTime" timebase="" duration="FeedbackTimeDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If FeedbackTime Expired, Transition to Bad" target="Bad" timer="FeedbackTime"></transition>
                </task_system_state>
                <task_system_state tag="Abort" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Report trial aborted" message="Trial aborted!"></action>
                    <action type="assignment" tag="Compute Production Time" variable="productionInterval" value="-2*interval"></action>
                    <action type="assignment" tag="Assign acquisitionTime" variable="acquisitionTime" value="now()"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Dequeue ready cue" type="dequeue_stimulus" stimulus="ready_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="direct" tag="Always Go to Bad" target="Bad"></transition>
                </task_system_state>
                <task_system_state tag="After Ready" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Compute Production Time" variable="productionInterval" value="(now() - ready_cue_onset_time_us -interval*2000) / 1000.0"></action>
                    <action type="assignment" tag="Assign acquisitionTime" variable="acquisitionTime" value="now()"></action>
                    <action type="assignment" tag="Assign afterReady" variable="afterReady" value="1"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Dequeue ready cue" type="dequeue_stimulus" stimulus="ready_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="direct" tag="Always Go to Bad" target="Bad"></transition>
                </task_system_state>
                <task_system_state tag="After Set1" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Compute Production Time" variable="productionInterval" value="(now() - set1_cue_onset_time_us -interval*1000) / 1000.0"></action>
                    <action type="assignment" tag="Assign acquisitionTime" variable="acquisitionTime" value="now()"></action>
                    <action type="assignment" tag="Assign afterSet1" variable="afterSet1" value="1"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Dequeue set cue" type="dequeue_stimulus" stimulus="set_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="direct" tag="Always Go to Bad" target="Bad"></transition>
                </task_system_state>
                <task_system_state tag="No Saccade" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="assignment" tag="Compute Production Time" variable="productionInterval" value="(now() - set2_cue_onset_time_us) / 1000.0"></action>
                    <action type="assignment" tag="Assign acquisitionTime" variable="acquisitionTime" value="now()"></action>
                    <action tag="Dequeue ball" type="dequeue_stimulus" stimulus="ball"></action>
                    <action tag="Dequeue set2 cue" type="dequeue_stimulus" stimulus="set2_cue"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="direct" tag="Always Go to Bad" target="Bad"></transition>
                </task_system_state>
                <task_system_state tag="Bad" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Dequeue target" type="dequeue_stimulus" stimulus="target"></action>
                    <action tag="Dequeue ballFeedback" type="dequeue_stimulus" stimulus="ballFeedback"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="if_else" tag="If/Else 2">
                        <action type="if" tag="If afterSet2, update win_fraction and flashRate" condition="afterSet2">
                            <action type="assignment" tag="Assign win_fraction" variable="win_fraction" value="win_fraction+dwin"></action>
                            <action type="assignment" tag="Assign flashRate" variable="flashRate" value="flashRate+dflashRate"></action>
                        </action>
                        <action type="if" tag="Else" condition="1">
                            <action type="assignment" tag="Assign win_fraction" variable="win_fraction" value="win_fraction"></action>
                            <action type="assignment" tag="Assign flashRate" variable="flashRate" value="flashRate"></action>
                        </action>
                    </action>
                    <action type="assignment" tag="Assign consecutiveCorrect" variable="consecutiveCorrect" value="0"></action>
                    <action type="report" tag="Report failure" message="Failure."></action>
                    <action type="start_timer" tag="Start Timeout" timer="Timeout" timebase="" duration="timeout" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If Timeout Expired, Transition to End Trial" target="End Trial" timer="Timeout"></transition>
                </task_system_state>
                <task_system_state tag="No Fix" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action tag="Dequeue Fix" type="dequeue_stimulus" stimulus="Fix"></action>
                    <action tag="Update Stimulus Display" type="update_stimulus_display"></action>
                    <action type="report" tag="Report no fixation" message="Failed to fixate."></action>
                    <action type="start_timer" tag="Start NoFixWait" timer="NoFixWait" timebase="" duration="NoFixWaitDur" duration_units="ms"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition type="timer_expired" tag="If NoFixWait Expired, Transition to Fix On" target="Fix On" timer="NoFixWait"></transition>
                </task_system_state>
                <task_system_state tag="Exit State System" interruptible="YES">
                    <action_marker _unmoveable="1" tag="Actions"></action_marker>
                    <action type="report" tag="Announce Exit State System" message="Leaving state system"></action>
                    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                    <transition tag="Return to parent task system" type="yield"></transition>
                </task_system_state>
            </task_system>
        </protocol>
    </experiment>
</monkeyml>