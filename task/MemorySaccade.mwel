
/* Memory saccade task (+overlap task)

    2022/8/22:
        - based on SmoothPursuit.mwel
        - fixation break for overlap -> red fixation

    2022/8/24:
        - dim target for MGS : target_alpha_memory, delta_alpha
        - target object: yellow ) for banana
        - fixation training for H

    2022/8/25:
        - bigger font & nTarget=4 (correct trials check for each direction)
        - distractors
        - option for moving

    2022/8/28
        - elaborate time course
        - staircase for ramp down duration (p_memoryTimeDur)

    2022/9/2
        - implement linear motion (id_linear_circular)
        - slower speed (angle_rotation0 for circular, memoryTimeDurMin)

    2022/9/7
        - targets around cue
        - center out motion (id_linear_circular=2 -> id_centerout=1)

    2022/9/11
        - Bonus reward if look at it after incorrect choice? incorrectDur:5s; targetWait: 5s (<-10s)
        - Issue: Fixation break -> remove motion around fixation? id_cue_motion=0
        - Fixation break penalty: NoFixWaitDur 2s (<-5s)
        - Occluder - just present at t(FixOff)?
        - Only two cue locations? distractor_nTheta

  (TBD)
  - test for use of cue/LUT, no cue trial?
  - for recording, regular MGS?

  training curriculum
1. Overlap saccade
2. Memory guided saccade (MGS)
3. MGS with distractors
4. MGS with moving objects
5. Target opacity on staircase

stimulus/image_file
path=/path/to/image.png

   */


///////////////////////////////////////////////////////////////////////////////
//
// I/O Devices
//
///////////////////////////////////////////////////////////////////////////////

// Include one of the following hand interfaces:

// %include 'hand_interfaces/keyboard' // debug
// %include 'hand_interfaces/gamepad'
// %include 'hand_interfaces/joystick'
%include 'hand_interfaces/joystick_monkey' // debug

// Include one of the following eye interfaces

// %include 'eye_interfaces/mouse' // debug
%include 'eye_interfaces/eyelink' // debug

%include 'labjack' // debug
// %include 'firmata_ephys' // debug
// %include 'firmata_train' // debug


///////////////////////////////////////////////////////////////////////////////
//
// Choose platform
//
///////////////////////////////////////////////////////////////////////////////
var platform = 'monkey_ephys'
// var platform = 'monkey_train'
// var platform = 'psychophysics'
// var platform = 'laptop'
// var platform = 'desktop'

///////////////////////////////////////////////////////////////////////////////
//
// Set data file, pwd, and python_site_packages
//
///////////////////////////////////////////////////////////////////////////////


var pwd = ""
var python_site_packages = ""
python_file ('set_pwd.py')

data_file ("$pwd/logs/$(date('%Y_%m_%d'))/mworks/$(date('%Y_%m_%d_%H_%M_%S'))")

///////////////////////////////////////////////////////////////////////////////
//
// Resources
//
///////////////////////////////////////////////////////////////////////////////

// These directories are copied to the machine running MWServer
resource ('sounds')

// These files are copied to the machine running MWServer and executed when the
// experiment loads
// python_file ('calibration_static.py')
// python_file ('task.py')

///////////////////////////////////////////////////////////////////////////////
//
// Sounds
//
///////////////////////////////////////////////////////////////////////////////

// These directories are copied to the machine running MWServer
resource ('sounds')

//sound/wav_file success_sound ('sounds/success.wav')
//sound/wav_file failure_sound ('sounds/failure.wav')
//sound/wav_file pong_sound ('sounds/pong.wav')

sound/wav_file pong_sound(
    path='sounds/pong.wav'
)

///////////////////////////////////////////////////////////////////////////////
//
// Variables
//
///////////////////////////////////////////////////////////////////////////////

    // var space_pressed = 0 (groups = I/O)

var data_file = ""
var tmp=0
var var_debug = 0

group Reward {
    var reward_line = 0 (groups = Reward)
    var rewardDur = 90 (groups = Reward)
    var bonusRewDur = 15  (groups = Reward)
}

group Fixation {
    var fixY = 0 (groups = Fixation)
    var fixX = 0 (groups = Fixation)
    var fixY_offset=0.8 // 0.5

    var fix_win = 6 (
        groups = Fixation
        persistant = 1
        )
    var fix_sz = 0.5 (groups = Fixation)

    var fixWaitDur = 10000 (groups = Fixation)
    var fixOn = 0 (groups = Fixation)

    var fix_red = 1 (groups = Fixation)
    var fix_green = 1 (groups = Fixation)
    var fix_blue = 1 (groups = Fixation)

    var fix_red_static = 1  (groups = Fixation)
    var fix_green_static = 1 (groups = Fixation)
    var fix_blue_static = 1 (groups = Fixation)

    var pursuitTheta = -90 (groups = Fixation) // down; if 0, horizontal
    var nRep = 1 (groups = Fixation) // 3
    var trialNum = 1e6  (groups = Fixation) // after this # trials, stop experiment
    var on_fix_dyn = 0 (groups = Fixation)
    var on_fix_static = 0 (groups = Fixation)


}


group Matlab {
    var sync = 0 (groups = Matlab)
    var Nback = 100 (
        groups = Matlab
        persistant = 1
        )
}

group Time {
    //time stamps for eye movement analysis
    var tStart = 0
    var tFix = 0
    var tTargetOn = 0
    var tOccluderOn = 0
    var tTargetOff = 0
    var tFixOff = 0
    var tResponse = 0
    var tRew = 0
    var tEnd = 0
    var flag_response=0
    var tResponse0=0
}

group Duration {
    var fixTimeDur = 0
    var fixTimeDurMean = 250
    var fixTimeDurMin = 250

    var targetTimeDur = 0
    var targetTimeDurMean = 250
    var targetTimeDurMin = 750 // 500 // 250

    var occluderTimeDur = 0
    var occluderTimeDurMean = 250
    var occluderTimeDurMin = 500 // 250

    var memoryTimeDur = 0.0001 // to prevent division by zero
    var memoryTimeDurMean = 250
    var memoryTimeDurMin = 500

    var targetWait = 5000//10000
    var targetWait0 = 5000//10000

    var responseRewardDelay = 100

    var incorrectDur = 5000
    var NoFixWaitDur = 2000
    var ITI = 500
    var timeout = 2000

    var id_overlap = 1 // not used anymore
    var id_ramp_opacity=1
    var id_fixation = 0 // not used anymore
}


group Staircase { // not used
    var fix_alpha_max = 1
    var t_visible = 0.5 // sec; alpha linearly decrease from max to min
    var fix_alpha_min = 1 // 0.3 // 0 // 0.5
    var fix_alpha_min0 = 0// 0.5
    var fix_alpha_min_feedback = 1 // 0 // 1 // 0 // if 1, visible feedback; if 0, invisible
    var id_visible = 0
    var p_visible = 1 // 0.2 // 1// 0 // 0.333

    var delta_fix_alpha_up = 0 //  0.1 // 0.01 // 0 // 0.01
    var delta_fix_alpha_down = 0 // 0.5 // 0.05 // 0 // 0.05
}

group target{ // just for target fixation window
    var target_red=1
    var target_green=1
    var target_blue=1
    var target_win = 3 // 5
    var on_target=0
    var target_sz = 0.001 // 0.5
    var target_radius= 3
    var target_theta=0
    var target_id=0
    var targetX = 0
    var targetY = 0
    var targetX_final = 0
    var targetY_final = 0
    var nTarget = 4 // 2 // 4
    var target_alpha=0 //1
    var target_alpha_memory=0.01
    var delta_alpha=0
}

group occluder{

    var occluder1_red = .5
    var occluder1_green = .5
    var occluder1_blue = .5
    var occluder2_red = .5
    var occluder2_green = .5
    var occluder2_blue = .5
    var occluder_size = 2
    var occluder1X = 0
    var occluder1Y = 0
    var occluder2X = 0
    var occluder2Y = 0
    var occluder_alpha = 1

}

group occluder_target{ // just for target fixation window
    var on_occluder_target=0
    var occluder_targetX = 0
    var occluder_targetY = 0
}

group object{ // banana
    var object_red=1 // oragne [1 .5 0]
    var object_green=.5
    var object_blue=0
    var object_sz = 3
    var object_theta=0
    var objectX = 0
    var objectY = 0
    var objectX_final = 0
    var objectY_final = 0
    var object_offsetY = 0.5
    var object_alpha=1
    var object_alpha0=1
    var object_alpha_memory=0 // 0.01
    var elapsed_time2 = 0
    var p_memoryTimeDur=0.0001 // 1 // staircase for ramp-down duration
    var delta_memoryTimeDur=0
    var p_memoryTimeDurMin=0.0001
    var p_memoryTimeDurMax=1
}


group distractor{ // purple grape
    var distractor_red=.5 // purple [0.5 0 1]
    var distractor_green=0
    var distractor_blue=1

    var circle_size=0.5
    var within_distance=sqrt(pow(circle_size,2)-pow((circle_size/2),2))/(1+sin(30/180*pi()))

    var distractor_radius= 8 // 6*circle_size// 8*circle_size// 2*circle_size+object_sz // relative to target/object
    var distractor_theta=0
    var distractor_nTheta=2 // 4
    var distractor_id=0

    var distractorX = 0
    var distractorY = 0

    var distractorX_final = 0
    var distractorY_final = 0
    var distractor_alpha=1
}

group Global {
    var pstop = 0 (groups = Trial)
    var startTrial = 0 (groups = Trial)
    var endTrial = 0 (groups = Trial)
    var localTrials = 0 (groups = Trial)
    var CorrectTrials = 0 (groups = Trial)
    var CorrectTrialsTarget = [0:(nTarget*distractor_nTheta-1)] (groups = Trial)
    var IncorrectTrials = 0 (groups = Trial)
    var IncorrectTrialsTarget = [0:(nTarget*distractor_nTheta-1)] (groups = Trial)

    var CorrectInvisibleTrials = 0 (groups = Trial)
    var id_bad = 0 (groups = Trial)
}

group photodiode{
    var photodiode_red = .5
    var photodiode_green = .5
    var photodiode_blue = .5
    var photodiode_size = 3
    var photodiodeX = -21.88 // top left
    var photodiodeY = 12.8
}

group labjack{
    var labjack_target_on = 0
    var labjack_cue_on = 0
}

group motion {
    var motion_direction = 0 // -1 for CW 1 for CCW, if circular; angle [0 90 180 270] if linear
    var angle_rotation=0
    var angle_rotation0=0
    var elapsed_time = 0
    var nAngle0=4 // initial angle from final location 120/nAngle0

    var id_linear_circular = 2 // if 0, linear; if 1, circular(radial); if 2, self-motion

    var id_cue_motion = 0 // 1 // if 0, no cue motion

    var id_centerout = 1

}

render_actions update_position_centerout ( // self-motion (circular)
    elapsed_time = elapsed_time
    ) {

    angle_rotation=elapsed_time/1000/memoryTimeDur // from 0 to 1

    distractorX = fixX + cos(distractor_theta*pi()/180)*distractor_radius*angle_rotation
    distractorY = fixY + sin(distractor_theta*pi()/180)*distractor_radius*angle_rotation

    targetX  = distractorX + cos(target_theta*pi()/180)*target_radius
    targetY  = distractorY + sin(target_theta*pi()/180)*target_radius

    objectX = targetX
    objectY = targetY

    occluder1X= targetX
    occluder1Y= targetY

    occluder2X= distractorX + cos((180+target_theta)*pi()/180)*target_radius
    occluder2Y= distractorY + sin((180+target_theta)*pi()/180)*target_radius

    occluder_targetX=occluder2X
    occluder_targetY=occluder2Y

}

render_actions update_position_linear ( // linear
    elapsed_time = elapsed_time
    ) {

    angle_rotation=(1-elapsed_time/1000/memoryTimeDur) // from 1 to 0

    distractorX = distractorX_final + angle_rotation*cos(motion_direction*pi()/180)*angle_rotation0
    distractorY = distractorY_final + angle_rotation*sin(motion_direction*pi()/180)*angle_rotation0

    targetX  = distractorX + cos(target_theta*pi()/180)*target_radius
    targetY  = distractorY + sin(target_theta*pi()/180)*target_radius

    objectX = targetX
    objectY = targetY

}

render_actions update_position_circular ( // circular(radial)
    elapsed_time = elapsed_time
    ) {

    angle_rotation=angle_rotation0*(1-elapsed_time/1000/memoryTimeDur)

    distractorX = fixX + cos(distractor_theta*pi()/180+angle_rotation)*distractor_radius
    distractorY = fixY + sin(distractor_theta*pi()/180+angle_rotation)*distractor_radius

    targetX  = distractorX + cos(target_theta*pi()/180)*target_radius
    targetY  = distractorY + sin(target_theta*pi()/180)*target_radius

    objectX = targetX
    objectY = targetY

}

render_actions object_disappear (
    elapsed_time = elapsed_time2
    ) {
    object_alpha=(object_alpha0-object_alpha_memory)*max(0,(1-elapsed_time2/1000/(p_memoryTimeDur*memoryTimeDur)))+object_alpha_memory // ramp down from object_alpha0 to object_alpha_memory
}


///////////////////////////////////////////////////////////////////////////////
//
// Stimuli
//
///////////////////////////////////////////////////////////////////////////////

group 'object'{
    stimulus/text object ( // alternative: ellipse rectangle
            text=')'
            font_name="Capitals"
            font_size=64

            color = object_red,object_green,object_blue
            text_alignment = center
            x_size = object_sz
            y_size = object_sz
            rotation = -45
            x_position = objectX
            y_position = objectY-object_offsetY
            alpha_multiplier = object_alpha
    )
}

group 'distractor'{
    stimulus/ellipse distractor1 ( // below
            color = distractor_red,distractor_green,distractor_blue
            x_size = circle_size
            y_size = circle_size
            x_position = distractorX
            y_position = distractorY-within_distance
            rotation = 0
            alpha_multiplier = distractor_alpha
    )
    stimulus/ellipse distractor2 ( // up left
            color = distractor_red,distractor_green,distractor_blue
            x_size = circle_size
            y_size = circle_size
            x_position = distractorX - within_distance*cos(30/180*pi())
            y_position = distractorY + within_distance*sin(30/180*pi())
            rotation = 0
            alpha_multiplier = distractor_alpha
    )

    stimulus/ellipse distractor3 ( // up right
            color = distractor_red,distractor_green,distractor_blue
            x_size = circle_size
            y_size = circle_size
            x_position = distractorX + within_distance*cos(30/180*pi())
            y_position = distractorY + within_distance*sin(30/180*pi())
            rotation = 0
            alpha_multiplier = distractor_alpha
    )

}

group 'occluder1'{
    stimulus/rectangle occluder1(
        color = occluder1_red,occluder1_green,occluder1_blue
        x_size = occluder_size
        y_size = occluder_size
        x_position = occluder1X
        y_position = occluder1Y
        rotation = 0
        alpha_multiplier = occluder_alpha
    )
}
group 'occluder2'{
    stimulus/rectangle occluder2(
        color = occluder2_red,occluder2_green,occluder2_blue
        x_size = occluder_size
        y_size = occluder_size
        x_position = occluder2X
        y_position = occluder2Y
        rotation = 0
        alpha_multiplier = occluder_alpha
    )
}

group 'occluderTarget'{
    stimulus/circular_fixation_point occluderTarget (
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_occluder_target
            x_size = target_sz
            y_size = target_sz
            x_position = occluder_targetX
            y_position = occluder_targetY
            rotation = 0
            alpha_multiplier = target_alpha
   )
}

group 'Fixation' {
    stimulus/circular_fixation_point fixCircleStatic (
            color = fix_red_static,fix_green_static,fix_blue_static
            trigger_width = fix_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_fix_static
            x_size = fix_sz
            y_size = fix_sz
            x_position = fixX
            y_position = fixY-fixY_offset
            rotation = 0
            alpha_multiplier = 1
    )
}

group 'Target'{
    stimulus/circular_fixation_point target (
            color = target_red,target_green,target_blue
            trigger_width = target_win
            trigger_watch_x = eye_x
            trigger_watch_y = eye_y
            trigger_flag = on_target
            x_size = target_sz
            y_size = target_sz
            x_position = targetX
            y_position = targetY
            rotation = 0
            alpha_multiplier = target_alpha
    )
}


group 'Photodiode'{
        stimulus/ellipse photodiode(
        color = photodiode_red,photodiode_green,photodiode_blue
        x_size = photodiode_size
        y_size = photodiode_size
        x_position = photodiodeX
        y_position = photodiodeY
        rotation = 0
        alpha_multiplier = 1
    )
}


iodevice/stimulus_display( // % distance 66, width 53, height 30 cm -> atand(height/2/distance)*2; % 25.6 deg
    background_color = 0,0,0
    )

///////////////////////////////////////////////////////////////////////////////
//
// Sampling trials
//
///////////////////////////////////////////////////////////////////////////////


%define sample_trial ()

    // sample distractors
    distractor_id = disc_rand(0,distractor_nTheta-1)
    distractor_theta = distractor_id*(360/distractor_nTheta) + 90 // with '+90' default is up

    distractorX_final = fixX + cos(distractor_theta*pi()/180)*distractor_radius
    distractorY_final = fixY+ sin(distractor_theta*pi()/180)*distractor_radius

    if (id_linear_circular==0){ // linear

        // decide motion direction based on target_id
        motion_direction = distractor_theta+180

        angle_rotation0=rand(distractor_radius/2,distractor_radius*3/2) // 5 to 15 dva

        distractorX = distractorX_final + cos(motion_direction*pi()/180)*angle_rotation0
        distractorY = distractorY_final + sin(motion_direction*pi()/180)*angle_rotation0

        angle_rotation=1
    }
    if (id_linear_circular==1){ // circular
        motion_direction=2*(disc_rand(0,1))-1 // -1 for CW 1 for CCW

        angle_rotation0=-motion_direction*disc_rand(0,nAngle0)*pi()/6/2 // +/-15*[-4 4]
        distractorX = fixX + cos(distractor_theta*pi()/180+angle_rotation0)*distractor_radius
        distractorY = fixY + sin(distractor_theta*pi()/180+angle_rotation0)*distractor_radius

        angle_rotation=angle_rotation0
    }
    if (id_linear_circular==2){ // self motion
        motion_direction=distractor_theta
        distractorX = fixX
        distractorY = fixY

    }

    // sample target
    target_id = disc_rand(0,nTarget-1) // 0 1 2 3:0 90 180 270deg
    target_theta = target_id*(360/nTarget)
    /*if (distractor_theta==90){
        target_theta=90
        }
    if (distractor_theta==270){
        target_theta=270
        }*/

    targetX_final = distractorX_final+ cos(target_theta*pi()/180)*target_radius
    targetY_final = distractorY_final+ sin(target_theta*pi()/180)*target_radius

    targetX  = distractorX + cos(target_theta*pi()/180)*target_radius
    targetY  = distractorY + sin(target_theta*pi()/180)*target_radius

    object_theta = target_theta
    objectX_final = targetX_final
    objectY_final = targetY_final

    objectX = targetX
    objectY = targetY

    // occluder
    occluder1X=objectX
    occluder1Y=objectY
    occluder2X=distractorX + cos((180+target_theta)*pi()/180)*target_radius
    occluder2Y=distractorY + sin((180+target_theta)*pi()/180)*target_radius
    occluder_targetX=occluder2X
    occluder_targetY=occluder2Y


    // sample durations
    fixTimeDur=-fixTimeDurMean*logn(rand(0,1)) + fixTimeDurMin // exp_rand(fixTimeDurMean,fixTimeDurMin)
    targetTimeDur=-targetTimeDurMean*logn(rand(0,1)) + targetTimeDurMin
    occluderTimeDur=-occluderTimeDurMean*logn(rand(0,1)) + occluderTimeDurMin
    memoryTimeDur=-memoryTimeDurMean*logn(rand(0,1)) + memoryTimeDurMin

%end

///////////////////////////////////////////////////////////////////////////////
//
// Protocols
//
///////////////////////////////////////////////////////////////////////////////


protocol 'MemorySaccade' {
    start_device_io (eye_tracker)

    // start_io_device (firmata) // debug
    start_io_device (labjack) // debug

    update_stimulus_display ()
    task Trials {
        state 'Initial' {
            localTrials = 0
            CorrectTrials = 0
            IncorrectTrials = 0
            CorrectInvisibleTrials = 0
            while (tmp<(distractor_nTheta*nTarget)){
                CorrectTrialsTarget[tmp]=0
                IncorrectTrialsTarget[tmp]=0
                tmp=tmp+1
            }

            sample_trial () // durations & target location

            goto ('Fix On')
        }
        state 'Fix On' {
            report ('localTrials = $localTrials')

            //MATLAB
            sync=0
            sync=1

            // reset trigger_flag
            // on_target = 0
            // on_fix_static = 0

            live_queue_stimulus(fixCircleStatic)

            update_stimulus_display ()
            tStart = now()
            startTrial = 1
            id_bad = 0

            start_timer (
                timer = fixWait
                duration = fixWaitDur // 10000
                duration_units = ms
                )
            goto (
                target = 'Static Fix'
                when = on_fix_static
                )
            timer_expired (
                target = 'Failure to fixate'
                timer = fixWait
                )
        }

        state 'Static Fix' {
            localTrials = localTrials+1

            tFix = now()
            id_bad = 1

            start_timer (
                timer = StaticFixWait
                duration = fixTimeDur // fixTimeDur=-fixTimeDurMean*logn(rand(0,1)) + fixTimeDurMin // exp_rand(fixTimeDurMean,fixTimeDurMin)
                duration_units = ms
                )
            goto (
                target = 'Failure to fixate'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Target On'
                timer = StaticFixWait
                )

        }
        state 'Target On' {
            tTargetOn = next_frame_time()
            queue_stimulus(photodiode)
            live_queue_stimulus(object)
            live_queue_stimulus(distractor1)
            live_queue_stimulus(distractor2)
            live_queue_stimulus(distractor3)
            update_stimulus_display ()
            id_bad = 2

            labjack_target_on = 1
            labjack_cue_on = 1

            start_timer (
                timer = timer_target_on
                duration = targetTimeDur
                duration_units = ms
                )
            goto (
                target = 'Failure to fixate'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Memory' // 'Occluder On'
                timer = timer_target_on
                )
        }

        /* state 'Occluder On' {
            tOccluderOn = next_frame_time()

            live_queue_stimulus(occluder1)
            live_queue_stimulus(occluder2)
            update_stimulus_display ()
            id_bad = 3

            start_timer (
                timer = timer_occluder_on
                duration = occluderTimeDur
                duration_units = ms
                )
            goto (
                target = 'Failure to fixate'
                when = !on_fix_static
                )
            timer_expired (
                target = 'Memory'
                timer = timer_occluder_on
                )

        } */

        state 'Memory' {
            tTargetOff = next_frame_time()
            id_bad = 4

            if (id_linear_circular==0){
                queue_stimulus (update_position_linear)
            }
            if (id_linear_circular==1){
                queue_stimulus (update_position_circular)
            }
            if (id_linear_circular==2){ // used now
                queue_stimulus (update_position_centerout)
            }

            if (id_ramp_opacity==1){ // used now
                queue_stimulus (object_disappear)
            }
            if (id_ramp_opacity==0){
                object_alpha=object_alpha_memory
            }

            if (id_cue_motion==0){
                distractor_alpha=0
            }
            dequeue_stimulus(photodiode)
            update_stimulus_display ()

            labjack_target_on = 0
            labjack_cue_on = 0

            start_timer (
                timer = timer_memory
                duration = memoryTimeDur
                duration_units = ms
                )
            goto (
                target = 'Failure to fixate'
                when = !on_fix_static
                )
            timer_expired (
                target = 'FixOff'
                timer = timer_memory
                )
        }
        state 'FixOff' {
            tFixOff= next_frame_time()
            id_bad = 5
            live_queue_stimulus(target)
            live_queue_stimulus(occluderTarget)
            live_queue_stimulus(occluder1)
            live_queue_stimulus(occluder2)
            dequeue_stimulus(fixCircleStatic)
            dequeue_stimulus (update_position_circular)
            dequeue_stimulus (update_position_centerout)
            dequeue_stimulus (update_position_linear)
            dequeue_stimulus (object_disappear)
            queue_stimulus(photodiode)
            if (id_cue_motion==0){
                distractor_alpha=1
            }

            update_stimulus_display ()
            labjack_cue_on = 1

            goto (
                target = 'Response'
                when = !id_fixation
                )
        }

        state 'Response' {
            id_bad = 6

            if (flag_response==0){
                tResponse0=now()
                flag_response=1
            }
            if (flag_response==1){
                targetWait=targetWait-(now()-tResponse0)/1000
            }

            start_timer (
                timer = timer_response
                duration = targetWait // 5000
                duration_units = ms
                )
            goto (
                target = 'post_response'
                when = on_target
                )
           goto (
            target = 'post_response_incorrect'
            when = on_occluder_target
            )
            timer_expired (
                target = 'Failure to fixate'
                timer = timer_response
                )
        }
        state 'post_response_incorrect' {
            id_bad = 7
            tResponse= now()

            start_timer (
                timer = timer_post_response
                duration = responseRewardDelay // 100
                duration_units = ms
                )
            goto (
                target = 'Response' // 'Failure to fixate'
                when = !on_occluder_target
                )
            timer_expired (
                target = 'Bad'
                timer = timer_post_response
                )
        }
        state 'Bad' {
            dequeue_stimulus(occluder2)
            // occluder2_red=1
            // occluder2_green=0
            // occluder2_blue=0
            update_stimulus_display ()
            start_timer (
                timer = timer_timeout
                duration = timeout // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'Incorrect'
                timer = timer_timeout
                )
        }

        state 'Incorrect' {
            report ('incorrect!: IncorrectTrials = $IncorrectTrials')

            // make target visible
            // dequeue_stimulus(occluder1)
            // dequeue_stimulus(occluder2)
            // object_alpha = 1 //target_alpha = 1
            dequeue_stimulus(distractor1)
            dequeue_stimulus(distractor2)
            dequeue_stimulus(distractor3)
            dequeue_stimulus(photodiode)
            update_stimulus_display ()
            labjack_cue_on = 0

            IncorrectTrialsTarget[target_id+nTarget*distractor_id] = IncorrectTrialsTarget[target_id+nTarget*distractor_id]+1
            IncorrectTrials = IncorrectTrials+1

            //staircase
            p_memoryTimeDur=min(p_memoryTimeDur+2*delta_memoryTimeDur,p_memoryTimeDurMax)

            start_timer (
                timer = NoFixWait
                duration = incorrectDur  // 5000
                duration_units = ms
                )

            goto (
                target = 'bonus reward'
                when = on_target
                )
            timer_expired (
                target = 'End Trial'
                timer = NoFixWait
                )
        }
        state 'post_response' {
            id_bad = 7
            tResponse= now()

            start_timer (
                timer = timer_post_response
                duration = responseRewardDelay // 100
                duration_units = ms
                )
            goto (
                target = 'Response' // 'Failure to fixate'
                when = !on_target
                )
            timer_expired (
                target = 'Reward'
                timer = timer_post_response
                )
        }

        state 'Reward' {
            report ('Success!: CorrectTrials = $CorrectTrials')
            tRew = now()

            // make target visible
            dequeue_stimulus(occluder1)
            dequeue_stimulus(occluder2)
            object_alpha = 1 //target_alpha = 1
            dequeue_stimulus(distractor1)
            dequeue_stimulus(distractor2)
            dequeue_stimulus(distractor3)
            dequeue_stimulus(photodiode)
            update_stimulus_display ()
            labjack_target_on = 1
            labjack_cue_on = 0

            // make target green
//            object_red=0 // target_red=0
//            object_blue=0 // target_blue=0
//            update_stimulus_display ()

            CorrectTrialsTarget[target_id+nTarget*distractor_id] = CorrectTrialsTarget[target_id+nTarget*distractor_id]+1
            CorrectTrials = CorrectTrials+1
            if (id_visible==0){
                CorrectInvisibleTrials=CorrectInvisibleTrials+1
            }

            //staircase
            p_memoryTimeDur=max(p_memoryTimeDur-delta_memoryTimeDur,p_memoryTimeDurMin)

            pulse ( // micro seconds
                variable = reward_line
                duration = (rewardDur)*1000
                )
            start_timer (
                timer = GreenTime
                duration = rewardDur
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = GreenTime
                )
        }
        state 'End Trial' {
            tEnd = now()

            endTrial = endTrial+1

            // reset stimulus
            object_red=1 // target_red=1
            object_green=0.5
            object_blue=0 // target_blue=1
            object_alpha = 1 // target_alpha = 1

            elapsed_time = 0

            fix_red_static = 1
            fix_green_static = 1
            fix_blue_static = 1

            distractor_alpha=1

            occluder2_red=.5
            occluder2_green=.5
            occluder2_blue=.5

            dequeue_stimulus (target)
            dequeue_stimulus (occluderTarget)
            dequeue_stimulus (occluder1)
            dequeue_stimulus (occluder2)
            dequeue_stimulus (object)
            dequeue_stimulus (fixCircleStatic)
            dequeue_stimulus(distractor1)
            dequeue_stimulus(distractor2)
            dequeue_stimulus(distractor3)
            dequeue_stimulus (update_position_linear)
            dequeue_stimulus (update_position_circular)
            dequeue_stimulus (update_position_centerout)
            dequeue_stimulus (object_disappear)
            dequeue_stimulus(photodiode)

            id_bad = 0

            flag_response=0
            targetWait=targetWait0

            update_stimulus_display ()
            labjack_target_on = 0
            labjack_cue_on = 0

            goto (
                target = 'Exit System'
                when = CorrectTrials >= trialNum
                )
            goto (
                target = 'Exit System'
                when = pstop
                )
            goto (ITI)
        }
        state ITI {

            sample_trial () // duration and target locations

            // override eye_x eye_y to reset trigger_flag
            eye_x=100

            start_timer (
                timer = fix_pur_ITI
                duration = ITI // 500
                duration_units = ms
                )
            timer_expired (
                target = 'Fix On'
                timer = fix_pur_ITI
                )
        }

        state 'Failure to fixate' {
            report ('Trial Failed: id_bad = $id_bad')
            tResponse= now()

            if (id_bad==2 || id_bad==3 || id_bad==4){ // target cue memory
                fix_green_static = 0
                fix_blue_static = 0
                dequeue_stimulus (target)
                dequeue_stimulus (object)
                dequeue_stimulus(distractor1)
                dequeue_stimulus(distractor2)
                dequeue_stimulus(distractor3)
                dequeue_stimulus (update_position_linear)
                dequeue_stimulus (update_position_circular)
                dequeue_stimulus (update_position_centerout)
                dequeue_stimulus (object_disappear)
                dequeue_stimulus(photodiode)
                update_stimulus_display ()
                labjack_target_on = 0
                labjack_cue_on = 0
            }
            if (id_bad==5 || id_bad==6){ // response fixOff; not able to find target
                //staircase
                p_memoryTimeDur=min(p_memoryTimeDur+delta_memoryTimeDur,p_memoryTimeDurMax)

                object_alpha = 1 //target_alpha = 1

                update_stimulus_display ()
                labjack_target_on = 1

            }

            start_timer (
                timer = NoFixWait
                duration = NoFixWaitDur  // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = NoFixWait
                )
        }

        state 'bonus reward' {
            // play_sound(success_sound) // debug
            dequeue_stimulus(occluder1)
            object_alpha = 1 //target_alpha = 1
            update_stimulus_display ()
            labjack_target_on = 1

            pulse ( // micro seconds
                variable = reward_line
                duration = (bonusRewDur)*1000
                )

            start_timer (
                timer = timer_timeout2
                duration = timeout // 2000
                duration_units = ms
                )
            timer_expired (
                target = 'End Trial'
                timer = timer_timeout2
                )
        }

        state 'Exit System' {
            report ('Leaving state system')
            yield ()
        }
    }
}
